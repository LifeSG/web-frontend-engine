{"version":3,"file":"index.3060cd72.js","sources":["../../../src/components/fields/image-upload/image-manager/image-manager.ts"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { AxiosApiClient, FileHelper, ImageHelper } from \"../../../../utils\";\nimport { usePrevious } from \"../../../../utils/hooks\";\nimport { ImageContext } from \"../image-context\";\nimport { EImageStatus, IImage, ISharedImageProps, TImageUploadOutputFileType, TUploadMethod } from \"../types\";\n\ninterface IProps extends Omit<ISharedImageProps, \"maxFiles\"> {\n\teditImage: boolean;\n\tcompress: boolean;\n\tdimensions: { width: number; height: number };\n\toutputType: TImageUploadOutputFileType;\n\tupload?: {\n\t\tmethod: TUploadMethod;\n\t\turl: string;\n\t};\n\tvalue: any;\n}\n\n/**\n * manages selected images by listening to images from context provider\n * rename / compress / upload\n */\nexport const ImageManager = (props: IProps) => {\n\t// =============================================================================\n\t// CONST, STATE, REFS\n\t// =============================================================================\n\tconst { accepts, compress, dimensions, editImage, id, maxSizeInKb, outputType, upload, value } = props;\n\tconst { images, setImages, setErrorCount } = useContext(ImageContext);\n\tconst previousImages = usePrevious(images);\n\tconst [managerErrorCount, setManagerErrorCount] = useState(0);\n\tconst previousValue = usePrevious(value);\n\tconst { setValue, getFieldState } = useFormContext();\n\tconst sessionId = useRef<string>();\n\n\t// =============================================================================\n\t// EFFECTS\n\t// =============================================================================\n\t// generate pseudo-random session id\n\tuseEffect(() => {\n\t\tsessionId.current = Array(5)\n\t\t\t.fill(0)\n\t\t\t.map(() => Math.random().toString(36).slice(2))\n\t\t\t.join(\"\");\n\t}, []);\n\n\tuseEffect(() => {\n\t\timages.forEach((image, index) => {\n\t\t\tconst previousFile = previousImages?.[index];\n\t\t\tif (image.status !== previousFile?.status || image.dataURL !== previousFile.dataURL) {\n\t\t\t\tswitch (image.status) {\n\t\t\t\t\tcase EImageStatus.INJECTED:\n\t\t\t\t\t\tFileHelper.dataUrlToBlob(image.dataURL)\n\t\t\t\t\t\t\t.then((blob) => {\n\t\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t\t...image,\n\t\t\t\t\t\t\t\t\t\tfile: new File([blob], image.name),\n\t\t\t\t\t\t\t\t\t\tstatus: EImageStatus.NONE,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t\tsetImages((prev) => prev.filter((prev, i) => i !== index));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.NONE:\n\t\t\t\t\t\tFileHelper.getType(image.file).then((fileType) => {\n\t\t\t\t\t\t\tconst mimeType = fileType.mime;\n\t\t\t\t\t\t\tif (mimeType && accepts.map(FileHelper.fileExtensionToMimeType).includes(mimeType)) {\n\t\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t\t...image,\n\t\t\t\t\t\t\t\t\t\tname: FileHelper.deduplicateFileName(\n\t\t\t\t\t\t\t\t\t\t\timages.map(({ name }) => name),\n\t\t\t\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\t\t\t\timage.name\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\ttype: mimeType,\n\t\t\t\t\t\t\t\t\t\tstatus: image.addedFrom !== \"schema\" ? image.status : EImageStatus.UPLOADED,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (image.addedFrom !== \"schema\") {\n\t\t\t\t\t\t\t\t\tcompress ? compressImage(index, image) : convertImage(index, image);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t\t...image,\n\t\t\t\t\t\t\t\t\t\tstatus: EImageStatus.ERROR_FORMAT,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.TO_RECOMPRESS:\n\t\t\t\t\t\trecompressImage(index, image);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.COMPRESSED:\n\t\t\t\t\tcase EImageStatus.CONVERTED:\n\t\t\t\t\tcase EImageStatus.RECOMPRESSED:\n\t\t\t\t\t\tif (!editImage) {\n\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t...updatedImages[index],\n\t\t\t\t\t\t\t\t\tstatus: EImageStatus.UPLOAD_READY,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.UPLOAD_READY:\n\t\t\t\t\t\tuploadImage(index, image);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.TO_DELETE:\n\t\t\t\t\t\tsetImages((prev) => prev.filter(({ status }) => status !== EImageStatus.TO_DELETE));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [images.map(({ status }) => status).join(\",\"), images.map(({ dataURL }) => dataURL).join(\",\")]);\n\n\t// track / update errors and values\n\tuseEffect(() => {\n\t\tlet updatedManagerErrorCount = 0;\n\t\timages.forEach((image) => {\n\t\t\tif (\n\t\t\t\t(image.type && !accepts.map(FileHelper.fileExtensionToMimeType).includes(image.type)) ||\n\t\t\t\t[EImageStatus.ERROR_GENERIC, EImageStatus.ERROR_SIZE].includes(image.status)\n\t\t\t) {\n\t\t\t\tupdatedManagerErrorCount++;\n\t\t\t}\n\t\t});\n\t\tsetErrorCount((prev) => Math.max(0, prev + updatedManagerErrorCount - managerErrorCount));\n\t\tsetManagerErrorCount(updatedManagerErrorCount);\n\n\t\tconst uploadedImages = images.filter(({ status }) => status === EImageStatus.UPLOADED);\n\t\tconst notPrefilledImages = uploadedImages.filter(({ addedFrom }) => addedFrom !== \"schema\");\n\t\tconst gotDeleteImages = images.filter(({ status }) => status === EImageStatus.TO_DELETE).length > 0;\n\n\t\t/**\n\t\t * should dirty if\n\t\t * - it is dirty in the first place\n\t\t * - there are non-prefilled images\n\t\t * - user deleted image (differentiated from reset)\n\t\t */\n\t\tconst shouldDirty = notPrefilledImages.length > 0 || gotDeleteImages;\n\n\t\tsetValue(\n\t\t\tid,\n\t\t\tuploadedImages.map(({ dataURL, drawingDataURL, name, uploadResponse }) => ({\n\t\t\t\tfileName: name,\n\t\t\t\tdataURL: drawingDataURL || dataURL,\n\t\t\t\tuploadResponse,\n\t\t\t})),\n\t\t\t{ shouldDirty }\n\t\t);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [images.map((image) => image.status).join(\",\")]);\n\n\tuseEffect(() => {\n\t\tif (previousValue !== undefined && value === undefined && images.length) {\n\t\t\tsetImages([]);\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [previousValue === undefined, value === undefined, images.length]);\n\n\t// =============================================================================\n\t// HELPER FUNCTIONS\n\t// =============================================================================\n\tconst getScale = (origWidth: number, origHeight: number): number => {\n\t\tlet scale = dimensions.width / origWidth;\n\t\tif (origHeight * scale > dimensions.height) {\n\t\t\tscale = dimensions.height / origHeight;\n\t\t}\n\t\treturn scale;\n\t};\n\n\tconst convertImage = async (index: number, image: IImage) => {\n\t\ttry {\n\t\t\tconst dataURL = await ImageHelper.convertBlob(image.file, FileHelper.fileExtensionToMimeType(outputType));\n\t\t\tconst filesize = FileHelper.getFilesizeFromBase64(dataURL);\n\n\t\t\tif (maxSizeInKb && filesize > maxSizeInKb * 1024) {\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tstatus: EImageStatus.ERROR_SIZE,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tdataURL,\n\t\t\t\t\t\tstatus: EImageStatus.CONVERTED,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tstatus: EImageStatus.ERROR_GENERIC,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\t\t}\n\t};\n\n\tconst compressImage = async (index: number, imageToCompress: IImage) => {\n\t\ttry {\n\t\t\tconst dataURL = await FileHelper.fileToDataUrl(imageToCompress.file);\n\t\t\tconst image = await ImageHelper.dataUrlToImage(dataURL);\n\t\t\tconst origDim = { w: image.naturalWidth, h: image.naturalHeight };\n\t\t\tconst scale = getScale(origDim.w, origDim.h);\n\t\t\tlet compressed = await ImageHelper.resampleImage(image, { scale });\n\t\t\tif (maxSizeInKb) {\n\t\t\t\tcompressed = (await ImageHelper.compressImage(compressed, {\n\t\t\t\t\tfileSize: maxSizeInKb,\n\t\t\t\t})) as File;\n\t\t\t}\n\n\t\t\tif (maxSizeInKb && compressed.size > maxSizeInKb * 1024) {\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tstatus: EImageStatus.ERROR_SIZE,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst dataURL = await FileHelper.fileToDataUrl(compressed);\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tdataURL,\n\t\t\t\t\t\tstatus: EImageStatus.COMPRESSED,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tstatus: EImageStatus.ERROR_GENERIC,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\t\t}\n\t};\n\n\tconst recompressImage = async (index: number, imageToCompress: IImage) => {\n\t\tif (imageToCompress.drawingDataURL) {\n\t\t\ttry {\n\t\t\t\tconst image = await ImageHelper.dataUrlToImage(imageToCompress.drawingDataURL);\n\t\t\t\tconst origDim = { w: image.naturalWidth, h: image.naturalHeight };\n\t\t\t\tconst scale = getScale(origDim.w, origDim.h);\n\t\t\t\tlet scaledFile = await ImageHelper.resampleImage(image, { scale });\n\t\t\t\tscaledFile = (await ImageHelper.compressImage(scaledFile, { fileSize: maxSizeInKb })) as File;\n\n\t\t\t\tif (scaledFile.size > maxSizeInKb * 1024) {\n\t\t\t\t\tconst updatedImages = [...images];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...images[index],\n\t\t\t\t\t\tstatus: EImageStatus.ERROR_SIZE,\n\t\t\t\t\t};\n\t\t\t\t\tsetImages(updatedImages);\n\t\t\t\t} else {\n\t\t\t\t\tconst dataURL = await FileHelper.fileToDataUrl(scaledFile);\n\t\t\t\t\tconst updatedImages = [...images];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...images[index],\n\t\t\t\t\t\tdrawingDataURL: dataURL,\n\t\t\t\t\t\tstatus: EImageStatus.RECOMPRESSED,\n\t\t\t\t\t};\n\t\t\t\t\tsetImages(updatedImages);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tstatus: EImageStatus.ERROR_GENERIC,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tconst uploadImage = async (index: number, iFile: IImage) => {\n\t\ttry {\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tstatus: EImageStatus.UPLOADING,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\n\t\t\tlet response: unknown;\n\t\t\tif (upload?.method && upload?.url) {\n\t\t\t\tconst formData = new FormData();\n\t\t\t\tformData.append(\"dataURL\", iFile.drawingDataURL || iFile.dataURL || \"\");\n\t\t\t\tformData.append(\"sessionId\", sessionId.current || \"\");\n\t\t\t\tformData.append(\"slot\", `${iFile.slot}`);\n\t\t\t\tresponse = await new AxiosApiClient(\"\", undefined, undefined, true)[upload.method](\n\t\t\t\t\tupload.url,\n\t\t\t\t\tformData,\n\t\t\t\t\t{\n\t\t\t\t\t\tonUploadProgress: (progressEvent) => {\n\t\t\t\t\t\t\tconst { loaded, total } = progressEvent;\n\t\t\t\t\t\t\tconst percent = Math.floor((loaded * 100) / total);\n\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\t\t\t\tuploadProgress: percent,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tuploadResponse: response,\n\t\t\t\t\tstatus: EImageStatus.UPLOADED,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tstatus: EImageStatus.ERROR_GENERIC,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\t\t}\n\t};\n\n\treturn null;\n};\n"],"names":["props","accepts","compress","dimensions","editImage","id","maxSizeInKb","outputType","upload","value","images","setImages","setErrorCount","useContext","ImageContext","previousImages","usePrevious","managerErrorCount","setManagerErrorCount","useState","previousValue","setValue","getFieldState","useFormContext","sessionId","useRef","useEffect","current","Array","fill","map","Math","random","toString","slice","join","forEach","image","index","previousFile","status","dataURL","EImageStatus","INJECTED","FileHelper","dataUrlToBlob","then","blob","prev","updatedImages","file","File","name","NONE","catch","filter","i","getType","fileType","mimeType","mime","fileExtensionToMimeType","includes","deduplicateFileName","type","addedFrom","UPLOADED","compressImage","convertImage","ERROR_FORMAT","TO_RECOMPRESS","recompressImage","COMPRESSED","CONVERTED","RECOMPRESSED","UPLOAD_READY","uploadImage","TO_DELETE","updatedManagerErrorCount","ERROR_GENERIC","ERROR_SIZE","max","uploadedImages","notPrefilledImages","gotDeleteImages","length","shouldDirty","drawingDataURL","uploadResponse","fileName","undefined","getScale","origWidth","origHeight","scale","width","height","async","ImageHelper","convertBlob","filesize","getFilesizeFromBase64","e","imageToCompress","fileToDataUrl","dataUrlToImage","origDim","w","naturalWidth","h","naturalHeight","compressed","resampleImage","fileSize","size","scaledFile","iFile","response","UPLOADING","method","url","formData","FormData","append","slot","AxiosApiClient","onUploadProgress","progressEvent","loaded","total","percent","floor","uploadProgress","err"],"mappings":"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"}