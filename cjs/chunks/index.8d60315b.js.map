{"version":3,"file":"index.8d60315b.js","sources":["../../../src/components/fields/image-upload/image-manager/image-manager.ts"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { AxiosApiClient, FileHelper, ImageHelper } from \"../../../../utils\";\nimport { useFieldEvent, usePrevious } from \"../../../../utils/hooks\";\nimport { ImageContext } from \"../image-context\";\nimport {\n\tEImageStatus,\n\tIImage,\n\tISharedImageProps,\n\tIUpdateImageValidation,\n\tTImageUploadOutputFileType,\n\tTUploadMethod,\n} from \"../types\";\n\ninterface IProps extends Omit<ISharedImageProps, \"maxFiles\"> {\n\teditImage: boolean;\n\tcompress: boolean;\n\tdimensions: { width: number; height: number };\n\toutputType: TImageUploadOutputFileType;\n\tupload?: {\n\t\tmethod: TUploadMethod;\n\t\turl: string;\n\t};\n\tvalue: any;\n}\n\n/**\n * manages selected images by listening to images from context provider\n * rename / compress / upload\n */\nexport const ImageManager = (props: IProps) => {\n\t// =============================================================================\n\t// CONST, STATE, REFS\n\t// =============================================================================\n\tconst { accepts, compress, dimensions, editImage, id, maxSizeInKb, outputType, upload, value } = props;\n\tconst { images, setImages, setErrorCount } = useContext(ImageContext);\n\tconst previousImages = usePrevious(images);\n\tconst [managerErrorCount, setManagerErrorCount] = useState(0);\n\tconst previousValue = usePrevious(value);\n\tconst { setValue } = useFormContext();\n\tconst sessionId = useRef<string>();\n\n\tconst { dispatchFieldEvent, addFieldEventListener, removeFieldEventListener } = useFieldEvent();\n\n\t// =============================================================================\n\t// EFFECTS\n\t// =============================================================================\n\tuseEffect(() => {\n\t\tconst handleUpdateValidation = (e: CustomEvent<IUpdateImageValidation>) => {\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst imageIndex = prev.findIndex((image) => image.id === e.detail.id);\n\t\t\t\tconst updatedImage = { ...prev[imageIndex] };\n\t\t\t\tupdatedImage.status = e.detail.updatedStatus;\n\t\t\t\tupdatedImage.customErrorMessage = e.detail.errorMessage;\n\n\t\t\t\tconst newImages = [...prev];\n\t\t\t\tnewImages.splice(imageIndex, 1, updatedImage);\n\t\t\t\treturn newImages;\n\t\t\t});\n\t\t};\n\t\taddFieldEventListener(\"update-file-validation\", id, handleUpdateValidation);\n\t\treturn () => removeFieldEventListener(\"update-file-validation\", id, handleUpdateValidation);\n\t}, []);\n\n\t// generate pseudo-random session id\n\tuseEffect(() => {\n\t\tsessionId.current = Array(5)\n\t\t\t.fill(0)\n\t\t\t.map(() => Math.random().toString(36).slice(2))\n\t\t\t.join(\"\");\n\t}, []);\n\n\tuseEffect(() => {\n\t\timages.forEach((image, index) => {\n\t\t\tconst previousFile = previousImages?.[index];\n\t\t\tif (image.status !== previousFile?.status || image.dataURL !== previousFile.dataURL) {\n\t\t\t\tswitch (image.status) {\n\t\t\t\t\tcase EImageStatus.INJECTED:\n\t\t\t\t\t\tFileHelper.dataUrlToBlob(image.dataURL)\n\t\t\t\t\t\t\t.then((blob) => {\n\t\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t\t...image,\n\t\t\t\t\t\t\t\t\t\tfile: new File([blob], image.name),\n\t\t\t\t\t\t\t\t\t\tstatus: EImageStatus.NONE,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t\tsetImages((prev) => prev.filter((prev, i) => i !== index));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.NONE:\n\t\t\t\t\t\tFileHelper.getType(image.file).then((fileType) => {\n\t\t\t\t\t\t\tconst mimeType = fileType.mime;\n\t\t\t\t\t\t\tif (mimeType && accepts.map(FileHelper.fileExtensionToMimeType).includes(mimeType)) {\n\t\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t\t...image,\n\t\t\t\t\t\t\t\t\t\tname: FileHelper.deduplicateFileName(\n\t\t\t\t\t\t\t\t\t\t\timages.map(({ name }) => name),\n\t\t\t\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\t\t\t\timage.name\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\ttype: mimeType,\n\t\t\t\t\t\t\t\t\t\tstatus: image.addedFrom !== \"schema\" ? image.status : EImageStatus.UPLOADED,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (image.addedFrom !== \"schema\") {\n\t\t\t\t\t\t\t\t\tcompress ? compressImage(index, image) : convertImage(index, image);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t\t...image,\n\t\t\t\t\t\t\t\t\t\tstatus: EImageStatus.ERROR_FORMAT,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.TO_RECOMPRESS:\n\t\t\t\t\t\trecompressImage(index, image);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.COMPRESSED:\n\t\t\t\t\tcase EImageStatus.CONVERTED:\n\t\t\t\t\tcase EImageStatus.RECOMPRESSED:\n\t\t\t\t\t\tif (!editImage) {\n\t\t\t\t\t\t\tconst shouldPreventDefault = !dispatchFieldEvent(\"upload-ready\", id, { imageData: image });\n\n\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t...updatedImages[index],\n\t\t\t\t\t\t\t\t\tstatus: shouldPreventDefault ? EImageStatus.PENDING : EImageStatus.UPLOAD_READY,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.UPLOAD_READY:\n\t\t\t\t\t\tuploadImage(index, image);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase EImageStatus.TO_DELETE:\n\t\t\t\t\t\tsetImages((prev) => prev.filter(({ status }) => status !== EImageStatus.TO_DELETE));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [images.map(({ status }) => status).join(\",\"), images.map(({ dataURL }) => dataURL).join(\",\")]);\n\n\t// track / update errors and values\n\tuseEffect(() => {\n\t\tlet updatedManagerErrorCount = 0;\n\t\timages.forEach((image) => {\n\t\t\tif (\n\t\t\t\t(image.type && !accepts.map(FileHelper.fileExtensionToMimeType).includes(image.type)) ||\n\t\t\t\t[EImageStatus.ERROR_GENERIC, EImageStatus.ERROR_SIZE].includes(image.status)\n\t\t\t) {\n\t\t\t\tupdatedManagerErrorCount++;\n\t\t\t}\n\t\t});\n\t\tsetErrorCount((prev) => Math.max(0, prev + updatedManagerErrorCount - managerErrorCount));\n\t\tsetManagerErrorCount(updatedManagerErrorCount);\n\n\t\tconst uploadedImages = images.filter(({ status }) => status === EImageStatus.UPLOADED);\n\t\tconst notPrefilledImages = uploadedImages.filter(({ addedFrom }) => addedFrom !== \"schema\");\n\t\tconst gotDeleteImages = images.filter(({ status }) => status === EImageStatus.TO_DELETE).length > 0;\n\n\t\t/**\n\t\t * should dirty if\n\t\t * - it is dirty in the first place\n\t\t * - there are non-prefilled images\n\t\t * - user deleted image (differentiated from reset)\n\t\t */\n\t\tconst shouldDirty = notPrefilledImages.length > 0 || gotDeleteImages;\n\n\t\tsetValue(\n\t\t\tid,\n\t\t\tuploadedImages.map(({ dataURL, drawingDataURL, name, uploadResponse }) => ({\n\t\t\t\tfileName: name,\n\t\t\t\tdataURL: drawingDataURL || dataURL,\n\t\t\t\tuploadResponse,\n\t\t\t})),\n\t\t\t{ shouldDirty }\n\t\t);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [images.map((image) => image.status).join(\",\")]);\n\n\tuseEffect(() => {\n\t\tif (previousValue !== undefined && value === undefined && images.length) {\n\t\t\tsetImages([]);\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [previousValue === undefined, value === undefined, images.length]);\n\n\t// =============================================================================\n\t// HELPER FUNCTIONS\n\t// =============================================================================\n\tconst getScale = (origWidth: number, origHeight: number): number => {\n\t\tlet scale = dimensions.width / origWidth;\n\t\tif (origHeight * scale > dimensions.height) {\n\t\t\tscale = dimensions.height / origHeight;\n\t\t}\n\t\treturn scale;\n\t};\n\n\tconst convertImage = async (index: number, image: IImage) => {\n\t\ttry {\n\t\t\tconst dataURL = await ImageHelper.convertBlob(image.file, FileHelper.fileExtensionToMimeType(outputType));\n\t\t\tconst filesize = FileHelper.getFilesizeFromBase64(dataURL);\n\n\t\t\tif (maxSizeInKb && filesize > maxSizeInKb * 1024) {\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tstatus: EImageStatus.ERROR_SIZE,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tdataURL,\n\t\t\t\t\t\tstatus: EImageStatus.CONVERTED,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tstatus: EImageStatus.ERROR_GENERIC,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\t\t}\n\t};\n\n\tconst compressImage = async (index: number, imageToCompress: IImage) => {\n\t\ttry {\n\t\t\tconst dataURL = await ImageHelper.convertBlob(\n\t\t\t\timageToCompress.file,\n\t\t\t\tFileHelper.fileExtensionToMimeType(outputType)\n\t\t\t);\n\t\t\tconst image = await ImageHelper.dataUrlToImage(dataURL);\n\t\t\tconst origDim = { w: image.naturalWidth, h: image.naturalHeight };\n\t\t\tconst scale = getScale(origDim.w, origDim.h);\n\t\t\tlet compressed = await ImageHelper.resampleImage(image, { scale });\n\t\t\tif (maxSizeInKb) {\n\t\t\t\tcompressed = (await ImageHelper.compressImage(compressed, {\n\t\t\t\t\tfileSize: maxSizeInKb,\n\t\t\t\t})) as File;\n\t\t\t}\n\n\t\t\tif (maxSizeInKb && compressed.size > maxSizeInKb * 1024) {\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tstatus: EImageStatus.ERROR_SIZE,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst dataURL = await FileHelper.fileToDataUrl(compressed);\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tdataURL,\n\t\t\t\t\t\tstatus: EImageStatus.COMPRESSED,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tstatus: EImageStatus.ERROR_GENERIC,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\t\t}\n\t};\n\n\tconst recompressImage = async (index: number, imageToCompress: IImage) => {\n\t\tif (imageToCompress.drawingDataURL) {\n\t\t\ttry {\n\t\t\t\tconst image = await ImageHelper.dataUrlToImage(imageToCompress.drawingDataURL);\n\t\t\t\tconst origDim = { w: image.naturalWidth, h: image.naturalHeight };\n\t\t\t\tconst scale = getScale(origDim.w, origDim.h);\n\t\t\t\tlet scaledFile = await ImageHelper.resampleImage(image, { scale });\n\t\t\t\tscaledFile = (await ImageHelper.compressImage(scaledFile, { fileSize: maxSizeInKb })) as File;\n\n\t\t\t\tif (scaledFile.size > maxSizeInKb * 1024) {\n\t\t\t\t\tconst updatedImages = [...images];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...images[index],\n\t\t\t\t\t\tstatus: EImageStatus.ERROR_SIZE,\n\t\t\t\t\t};\n\t\t\t\t\tsetImages(updatedImages);\n\t\t\t\t} else {\n\t\t\t\t\tconst dataURL = await FileHelper.fileToDataUrl(scaledFile);\n\t\t\t\t\tconst updatedImages = [...images];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...images[index],\n\t\t\t\t\t\tdrawingDataURL: dataURL,\n\t\t\t\t\t\tstatus: EImageStatus.RECOMPRESSED,\n\t\t\t\t\t};\n\t\t\t\t\tsetImages(updatedImages);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tsetImages((prev) => {\n\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tstatus: EImageStatus.ERROR_GENERIC,\n\t\t\t\t\t};\n\t\t\t\t\treturn updatedImages;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tconst uploadImage = async (index: number, iFile: IImage) => {\n\t\ttry {\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tstatus: EImageStatus.UPLOADING,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\n\t\t\tlet response: unknown;\n\t\t\tif (upload?.method && upload?.url) {\n\t\t\t\tconst formData = new FormData();\n\t\t\t\tformData.append(\"dataURL\", iFile.drawingDataURL || iFile.dataURL || \"\");\n\t\t\t\tformData.append(\"sessionId\", sessionId.current || \"\");\n\t\t\t\tformData.append(\"slot\", `${iFile.slot}`);\n\t\t\t\tresponse = await new AxiosApiClient(\"\", undefined, undefined, true)[upload.method](\n\t\t\t\t\tupload.url,\n\t\t\t\t\tformData,\n\t\t\t\t\t{\n\t\t\t\t\t\tonUploadProgress: (progressEvent) => {\n\t\t\t\t\t\t\tconst { loaded, total } = progressEvent;\n\t\t\t\t\t\t\tconst percent = Math.floor((loaded * 100) / total);\n\t\t\t\t\t\t\tsetImages((prev) => {\n\t\t\t\t\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\t\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\t\t\t\tuploadProgress: percent,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\treturn updatedImages;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tuploadResponse: response,\n\t\t\t\t\tstatus: EImageStatus.UPLOADED,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tsetImages((prev) => {\n\t\t\t\tconst updatedImages = [...prev];\n\t\t\t\tupdatedImages[index] = {\n\t\t\t\t\t...prev[index],\n\t\t\t\t\tstatus: EImageStatus.ERROR_GENERIC,\n\t\t\t\t};\n\t\t\t\treturn updatedImages;\n\t\t\t});\n\t\t}\n\t};\n\n\treturn null;\n};\n"],"names":["props","accepts","compress","dimensions","editImage","id","maxSizeInKb","outputType","upload","value","images","setImages","setErrorCount","useContext","ImageContext","previousImages","usePrevious","managerErrorCount","setManagerErrorCount","useState","previousValue","setValue","useFormContext","sessionId","useRef","dispatchFieldEvent","addFieldEventListener","removeFieldEventListener","useFieldEvent","useEffect","handleUpdateValidation","e","prev","imageIndex","findIndex","image","detail","updatedImage","status","updatedStatus","customErrorMessage","errorMessage","newImages","splice","current","Array","fill","map","Math","random","toString","slice","join","forEach","index","previousFile","dataURL","EImageStatus","INJECTED","FileHelper","dataUrlToBlob","then","blob","updatedImages","file","File","name","NONE","catch","filter","i","getType","fileType","mimeType","mime","fileExtensionToMimeType","includes","deduplicateFileName","type","addedFrom","UPLOADED","compressImage","convertImage","ERROR_FORMAT","TO_RECOMPRESS","recompressImage","COMPRESSED","CONVERTED","RECOMPRESSED","shouldPreventDefault","imageData","PENDING","UPLOAD_READY","uploadImage","TO_DELETE","updatedManagerErrorCount","ERROR_GENERIC","ERROR_SIZE","max","uploadedImages","notPrefilledImages","gotDeleteImages","length","shouldDirty","drawingDataURL","uploadResponse","fileName","undefined","getScale","origWidth","origHeight","scale","width","height","async","ImageHelper","convertBlob","filesize","getFilesizeFromBase64","imageToCompress","dataUrlToImage","origDim","w","naturalWidth","h","naturalHeight","compressed","resampleImage","fileSize","size","fileToDataUrl","scaledFile","iFile","response","UPLOADING","method","url","formData","FormData","append","slot","AxiosApiClient","onUploadProgress","progressEvent","loaded","total","percent","floor","uploadProgress","err"],"mappings":"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"}