"use strict";var e=require("react"),i=require("./index.e41608b2.js");require("react/jsx-runtime"),require("@lifesg/react-design-system/theme"),require("styled-components"),require("@lifesg/react-design-system/markup"),require("react-dom/server"),require("@lifesg/react-design-system/typography"),require("@lifesg/react-design-system/button"),require("@lifesg/react-design-system/modal"),require("@lifesg/react-design-system/alert"),require("@lifesg/react-design-system/layout"),require("@lifesg/react-design-system/box-container"),require("@lifesg/react-design-system/v2_layout"),require("@lifesg/react-design-system/divider"),require("@lifesg/react-design-system/v2_media"),require("@lifesg/react-design-system/text-list"),require("@lifesg/react-design-system/popover-v2"),require("@lifesg/react-icons"),require("@lifesg/react-design-system/tab"),require("@lifesg/react-icons/plus-circle-fill"),require("@lifesg/react-design-system/button-with-icon"),require("@lifesg/react-design-system/error-display"),require("@lifesg/react-design-system/filter"),require("@lifesg/react-design-system/uneditable-section"),require("@lifesg/react-design-system/timeline"),require("@lifesg/react-design-system/form"),require("@lifesg/react-design-system/checkbox"),require("@lifesg/react-design-system/toggle"),require("@lifesg/react-design-system/file-upload"),require("@lifesg/react-icons/cross"),require("@lifesg/react-design-system/icon-button"),require("@lifesg/react-icons/bin"),require("@lifesg/react-icons/eraser"),require("@lifesg/react-icons/pencil"),require("@lifesg/react-icons/pencil-stroke"),require("@lifesg/react-icons/plus"),require("@lifesg/react-icons/exclamation-triangle"),require("@lifesg/react-icons/pin-fill"),require("@lifesg/react-design-system/image-button"),require("@lifesg/react-design-system/radio-button");const t=["image/jpeg","image/gif","image/png"];exports.default=s=>{const{compressImages:a,fileTypeRule:r,id:l,maxFileSizeRule:n,upload:o,uploadRule:u,value:m}=s,{files:d,setFiles:c,setCurrentFileIds:f}=e.useContext(i.FileUploadContext),g=i.usePrevious(m),{setValue:p}=i.useFormContext(),{dispatchFieldEvent:y}=i.useFieldEvent(),F=e.useRef();e.useEffect((()=>{F.current=i.generateRandomId()}),[]),e.useEffect((()=>{d.forEach((async(e,t)=>{try{switch(e.status){case i.EFileStatus.INJECTED:await R(e,t);break;case i.EFileStatus.NONE:await q(e,t);break;case i.EFileStatus.UPLOAD_READY:await U(e,t);break;case i.EFileStatus.TO_DELETE:S(t)}}catch(e){E(t)}}));const e=d.filter((({status:e})=>e===i.EFileStatus.UPLOADED)),t=e.filter((({addedFrom:e})=>"schema"!==e)).length>0,s=d.filter((({status:e})=>e===i.EFileStatus.TO_DELETE)).length>0,a=t||s;f(e.map((({fileItem:e})=>e.id))),p(l,e.map((({dataURL:e,fileItem:i,fileUrl:t,uploadResponse:s})=>({..."base64"===o.type?{dataURL:e}:{},fileId:i.id,fileName:i.name,fileUrl:t,uploadResponse:s}))),{shouldDirty:a,shouldTouch:t})}),[d.map((({fileItem:e,status:i})=>`${e?.id}-${i}`)).join(",")]),e.useEffect((()=>{void 0!==g&&void 0===m&&d.length&&c([])}),[d,g,c,m]);const E=e=>{c((t=>{const s=[...t],a=t[e];return s[e]={...a,fileItem:{...a.fileItem,id:a.fileItem?.id||i.generateRandomId(),name:a.rawFile.name,errorMessage:u?.errorMessage||i.ERROR_MESSAGES.UPLOAD().GENERIC},status:i.EFileStatus.ERROR_GENERIC},s}))},I=async(e,s)=>{if(t.includes(s||e.fileItem?.type)){const t=await i.ImageHelper.dataUrlToImage(e.dataURL),s=await i.ImageHelper.resampleImage(t,{width:94,height:94,crop:!0});return await i.FileHelper.fileToDataUrl(s)}return""},w=async e=>{const{addedFrom:t,dataURL:s,rawFile:a}=e,l=await i.FileHelper.getType(a);if(!(!r.fileType?.length||r.fileType?.includes(l.ext)))return{errorMessage:r.errorMessage||i.ERROR_MESSAGES.UPLOAD().FILE_TYPE(r.fileType||[]),fileType:l,status:i.EFileStatus.ERROR_FORMAT};if(n.maxSizeInKb>0){const e=1024*n.maxSizeInKb;if("base64"===o.type&&i.FileHelper.getFilesizeFromBase64(s)>e||"multipart"===o.type&&a.size>e)return{errorMessage:n.errorMessage||i.ERROR_MESSAGES.UPLOAD().MAX_FILE_SIZE(n.maxSizeInKb),fileType:l,status:i.EFileStatus.ERROR_SIZE}}return"schema"===t?{fileType:l,status:i.EFileStatus.UPLOADED}:{fileType:l,status:i.EFileStatus.UPLOAD_READY}},R=async(e,t)=>{let s;if(c((e=>{const s=[...e];return s[t]={...e[t],status:i.EFileStatus.INJECTING},s})),e.dataURL){const t=await i.FileHelper.dataUrlToBlob(e.dataURL);s=new File([t],e.rawFile.name)}else if(e.fileUrl){const t=await new i.AxiosApiClient("",void 0,void 0,!1,{responseType:"blob"}).get(e.fileUrl),a=await i.FileHelper.getType(new File([t],e.rawFile.name));s=new File([t],e.rawFile.name,{type:a.mime}),e.dataURL=await i.FileHelper.fileToDataUrl(s)}const{errorMessage:a,fileType:r}=await w({...e,rawFile:s}),l=await I(e,r.mime);c((n=>{const o=[...n];return o[t]={...e,fileItem:{errorMessage:a,id:e.fileItem?.id||i.generateRandomId(),name:i.FileHelper.deduplicateFileName(d.map((({fileItem:e})=>e?.name)),t,s.name),progress:1,size:s.size,type:r.mime,thumbnailImageDataUrl:l},rawFile:s,status:i.EFileStatus.UPLOADED},o}))},q=async(e,t)=>{const s=await b(e),a=await i.FileHelper.fileToDataUrl(s.rawFile),{errorMessage:r,fileType:l,status:n}=await w({dataURL:a,...s});c((e=>{const o=[...e];return o[t]={...s,dataURL:a,fileItem:{errorMessage:r,id:i.generateRandomId(),name:i.FileHelper.deduplicateFileName(d.map((({fileItem:e})=>e?.name)),t,i.FileHelper.sanitizeFileName(s.rawFile.name)),size:s.rawFile.size,type:l.mime,progress:0},status:n},o}))},U=async(e,t)=>{c((e=>{const s=[...e];return s[t]={...e[t],status:i.EFileStatus.UPLOADING},s}));const s=new FormData;s.append("sessionId",o?.sessionId||F.current||""),s.append("fileId",e.fileItem.id),s.append("slot",e.slot.toString()),"base64"===o.type?s.append("dataURL",e.dataURL):"multipart"===o.type&&s.append("file",e.rawFile,e.fileItem?.name);try{const a=await new i.AxiosApiClient("",void 0,void 0,!0).post(o.url,s,{headers:{"Content-Type":"base64"===o.type?"application/json":"multipart/form-data",...o.headers},onUploadProgress:e=>{const{loaded:i,total:s}=e;c((e=>{if(!e[t])return e;const a=[...e];return a[t]={...e[t],fileItem:{...e[t].fileItem,progress:i/s}},a}))}}),r=await I(e);c((e=>{if(!e[t])return e;const s=[...e];return s[t]={...e[t],fileItem:{...e[t].fileItem,progress:1,thumbnailImageDataUrl:r},fileUrl:a?.data?.fileUrl,status:i.EFileStatus.UPLOADED,uploadResponse:a},s}))}catch(i){throw y("upload-error",l,{fileId:e.fileItem.id,errorData:i?.response?.data}),i}},S=e=>{c((i=>i.filter(((i,t)=>t!==e))))},b=async e=>{if(n.maxSizeInKb>0&&a){const s=1024*n.maxSizeInKb;if(e.rawFile.size>s){const s=await i.FileHelper.getType(e.rawFile);if(t.includes(s.mime)){let t=await i.ImageHelper.compressImage(e.rawFile,{fileSize:n.maxSizeInKb});return t instanceof Blob&&(t=i.FileHelper.blobToFile(t,{name:e.rawFile.name,lastModified:e.rawFile.lastModified})),{...e,rawFile:t}}}}return e};return null};
//# sourceMappingURL=file-upload-manager.1f3de2f5.js.map
