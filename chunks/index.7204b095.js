import{useContext as t,useRef as e,useEffect as s}from"react";import{f as a,u as i,a as r,b as o,g as n,h as l,e as c,I as m,A as d}from"./index.530dad95.js";import"react/jsx-runtime";import"@lifesg/react-design-system/theme";import"styled-components";import"@lifesg/react-design-system/typography";import"@lifesg/react-design-system/button";import"@lifesg/react-design-system/modal";import"@lifesg/react-design-system/markup";import"react-dom/server";import"@lifesg/react-design-system/alert";import"@lifesg/react-design-system/layout";import"@lifesg/react-design-system/box-container";import"@lifesg/react-design-system/v2_layout";import"@lifesg/react-design-system/divider";import"@lifesg/react-design-system/v2_media";import"@lifesg/react-design-system/text-list";import"@lifesg/react-design-system/popover-v2";import"@lifesg/react-icons";import"@lifesg/react-design-system/tab";import"@lifesg/react-icons/plus-circle-fill";import"@lifesg/react-design-system/button-with-icon";import"@lifesg/react-design-system/error-display";import"@lifesg/react-design-system/filter";import"@lifesg/react-design-system/uneditable-section";import"@lifesg/react-design-system/timeline";import"@lifesg/react-design-system/form";import"@lifesg/react-design-system/checkbox";import"@lifesg/react-design-system/toggle";import"@lifesg/react-design-system/file-upload";import"@lifesg/react-icons/cross";import"@lifesg/react-design-system/icon-button";import"@lifesg/react-icons/bin";import"@lifesg/react-icons/eraser";import"@lifesg/react-icons/pencil";import"@lifesg/react-icons/pencil-stroke";import"@lifesg/react-icons/plus";import"@lifesg/react-icons/exclamation-triangle";import"@lifesg/react-icons/pin-fill";import"@lifesg/react-design-system/image-button";import"@lifesg/react-design-system/radio-button";const g=g=>{const{accepts:p,compress:u,dimensions:f,editImage:E,id:R,maxSizeInKb:y,outputType:h,upload:D,value:O}=g,{images:U,setImages:T,setErrorCount:w,setCurrentFileIds:I}=t(a),L=i(U),b=i(O),{setValue:_}=r(),v=e(),S=e(0),{dispatchFieldEvent:M,addFieldEventListener:N,removeFieldEventListener:C}=o();s((()=>{const t=t=>{T((e=>{const s=e.findIndex((e=>e.id===t.detail.id)),a={...e[s]};a.status=t.detail.updatedStatus,a.customErrorMessage=t.detail.errorMessage;const i=[...e];return i.splice(s,1,a),i}))};return N("update-image-status",R,t),()=>C("update-image-status",R,t)}),[N,R,C,T]),s((()=>{v.current=n()}),[]),s((()=>{U.forEach(((t,e)=>{const s=L?.[e];if(t.status!==s?.status||t.dataURL!==s.dataURL)switch(t.status){case l.INJECTED:c.dataUrlToBlob(t.dataURL).then((s=>{T((a=>{const i=[...a];return i[e]={...t,file:new File([s],t.name),status:l.NONE},i}))})).catch((()=>{T((t=>t.filter(((t,s)=>s!==e))))}));break;case l.NONE:c.getType(t.file).then((s=>{const a=s.mime;a&&p.map(c.fileExtensionToMimeType).includes(a)?(T((s=>{const i=[...s];return i[e]={...t,name:c.deduplicateFileName(U.map((({name:t})=>t)),e,c.sanitizeFileName(t.name)),type:a,status:"schema"!==t.addedFrom?t.status:l.UPLOADED},i})),"schema"!==t.addedFrom&&(u?F(e,t):x(e,t))):T((s=>{const a=[...s];return a[e]={...t,status:l.ERROR_FORMAT},a}))}));break;case l.TO_RECOMPRESS:A(e,t);break;case l.COMPRESSED:case l.CONVERTED:case l.RECOMPRESSED:if(!E){const s=!M("upload-ready",R,{imageData:t});T((t=>{const a=[...t];return a[e]={...a[e],status:s?l.PENDING:l.UPLOAD_READY},a}))}break;case l.UPLOAD_READY:k(e,t);break;case l.TO_DELETE:T((t=>t.filter((({status:t})=>t!==l.TO_DELETE))));break;case l.UPLOADED:M("uploaded",R,{imageData:t})}}))}),[U.map((({status:t})=>t)).join(","),U.map((({dataURL:t})=>t)).join(",")]),s((()=>{let t=0;U.forEach((e=>{(e.type&&!p.map(c.fileExtensionToMimeType).includes(e.type)||[l.ERROR_GENERIC,l.ERROR_SIZE].includes(e.status))&&t++})),w((e=>Math.max(0,e+t-S.current))),S.current=t;const e=U.filter((({status:t})=>t===l.UPLOADED||t===l.ERROR_CUSTOM_MUTED)),s=e.filter((({addedFrom:t})=>"schema"!==t)),a=U.filter((({status:t})=>t===l.TO_DELETE)).length>0,i=s.length>0,r=i||a;I(e.map((({id:t})=>t))),_(R,e.map((({id:t,dataURL:e,drawingDataURL:s,name:a,metadata:i,uploadResponse:r})=>({fileId:t,fileName:a,dataURL:s||e,metadata:i,uploadResponse:r}))),{shouldDirty:r,shouldTouch:i})}),[p,R,U,w,_]),s((()=>{void 0!==b&&void 0===O&&U.length&&T([])}),[void 0===b,void 0===O,U.length]);const P=(t,e)=>{let s=f.width/t;return e*s>f.height&&(s=f.height/e),s},x=async(t,e)=>{try{const s=await m.convertBlob(e.file,c.fileExtensionToMimeType(h)),a=c.getFilesizeFromBase64(s);if(y&&a>1024*y)T((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_SIZE},s}));else{const a=await m.getMetadata(e.file);T((e=>{const i=[...e];return i[t]={...e[t],dataURL:s,metadata:a,status:l.CONVERTED},i}))}}catch(e){T((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_GENERIC},s}))}},F=async(t,e)=>{try{const s=await m.convertBlob(e.file,c.fileExtensionToMimeType(h)),a=await m.dataUrlToImage(s),i={w:a.naturalWidth,h:a.naturalHeight},r=P(i.w,i.h);let o=await m.resampleImage(a,{scale:r});if(y&&(o=await m.compressImage(o,{fileSize:y})),y&&o.size>1024*y)T((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_SIZE},s}));else{const s=await m.getMetadata(e.file),a=await c.fileToDataUrl(o);T((e=>{const i=[...e];return i[t]={...e[t],dataURL:a,metadata:s,status:l.COMPRESSED},i}))}}catch(e){T((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_GENERIC},s}))}},A=async(t,e)=>{if(e.drawingDataURL)try{const s=await m.dataUrlToImage(e.drawingDataURL),a={w:s.naturalWidth,h:s.naturalHeight},i=P(a.w,a.h);let r=await m.resampleImage(s,{scale:i});if(r=await m.compressImage(r,{fileSize:y}),r.size>1024*y){const e=[...U];e[t]={...U[t],status:l.ERROR_SIZE},T(e)}else{const e=await c.fileToDataUrl(r),s=[...U];s[t]={...U[t],drawingDataURL:e,status:l.RECOMPRESSED},T(s)}}catch(e){T((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_GENERIC},s}))}},k=async(t,e)=>{try{let s;if(T((e=>{const s=[...e];return s[t]={...e[t],status:l.UPLOADING},s})),D?.method&&D?.url){const a=new FormData;a.append("dataURL",e.drawingDataURL||e.dataURL||""),a.append("sessionId",D?.sessionId||v.current||""),a.append("slot",`${e.slot}`),s=await new d("",void 0,void 0,!0)[D.method](D.url,a,{onUploadProgress:e=>{const{loaded:s,total:a}=e,i=Math.floor(100*s/a);T((e=>{const s=[...e];return s[t]={...e[t],uploadProgress:i},s}))}})}T((e=>{const a=[...e];return a[t]={...e[t],uploadResponse:s,status:l.UPLOADED},a}))}catch(e){T((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_GENERIC},s}))}};return null};export{g as default};
//# sourceMappingURL=index.7204b095.js.map
