{"version":3,"file":"file-upload-manager.50042f7e.js","sources":["../../src/components/fields/file-upload/file-upload-manager.ts"],"sourcesContent":["import { useContext, useEffect, useRef } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { AxiosApiClient, FileHelper, ImageHelper, generateRandomId } from \"../../../utils\";\nimport { usePrevious } from \"../../../utils/hooks\";\nimport { ERROR_MESSAGES } from \"../../shared\";\nimport { FileUploadContext } from \"./file-upload-context\";\nimport { EFileStatus, IFile, IFileUploadSchema, IFileUploadValidationRule, IFileUploadValue } from \"./types\";\n\ninterface IProps {\n\tcompressImages: boolean;\n\tfileTypeRule: IFileUploadValidationRule;\n\tid: string;\n\tmaxFileSizeRule: IFileUploadValidationRule;\n\tupload: IFileUploadSchema[\"uploadOnAddingFile\"];\n\tvalue: IFileUploadValue[];\n}\n\nconst RESIZEABLE_IMAGE_TYPES = [\"image/jpeg\", \"image/gif\", \"image/png\"];\n\nconst FileUploadManager = (props: IProps) => {\n\t// =============================================================================\n\t// CONST, STATE, REFS\n\t// =============================================================================\n\tconst { compressImages, fileTypeRule, id, maxFileSizeRule, upload, value } = props;\n\tconst { files, setFiles } = useContext(FileUploadContext);\n\tconst previousValue = usePrevious(value);\n\tconst { setValue } = useFormContext();\n\tconst sessionId = useRef<string>();\n\n\t// =============================================================================\n\t// EFFECTS\n\t// =============================================================================\n\tuseEffect(() => {\n\t\tsessionId.current = generateRandomId();\n\t}, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\t// handle file status\n\t\t\tfiles.forEach(async (file, index) => {\n\t\t\t\ttry {\n\t\t\t\t\tswitch (file.status) {\n\t\t\t\t\t\tcase EFileStatus.INJECTED:\n\t\t\t\t\t\t\tawait injectFile(file, index);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EFileStatus.NONE:\n\t\t\t\t\t\t\tawait parseFile(file, index);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EFileStatus.UPLOAD_READY:\n\t\t\t\t\t\t\tawait uploadFile(file, index);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EFileStatus.TO_DELETE:\n\t\t\t\t\t\t\tdeleteFile(index);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\thandleGenericError(index);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// track / update values\n\t\t\tconst uploadedFiles = files.filter(({ status }) => status === EFileStatus.UPLOADED);\n\t\t\tconst notPrefilledFiles = uploadedFiles.filter(({ addedFrom }) => addedFrom !== \"schema\");\n\t\t\tconst gotDeleteFiles = files.filter(({ status }) => status === EFileStatus.TO_DELETE).length > 0;\n\n\t\t\t/**\n\t\t\t * should dirty if\n\t\t\t * - it is dirty in the first place\n\t\t\t * - there are non-prefilled files\n\t\t\t * - user deleted file (differentiated from reset)\n\t\t\t */\n\t\t\tconst shouldDirty = notPrefilledFiles.length > 0 || gotDeleteFiles;\n\n\t\t\tsetValue(\n\t\t\t\tid,\n\t\t\t\tuploadedFiles.map(({ dataURL, fileItem, fileUrl, uploadResponse }) => ({\n\t\t\t\t\t...(upload.type === \"base64\" ? { dataURL } : {}),\n\t\t\t\t\tfileId: fileItem.id,\n\t\t\t\t\tfileName: fileItem.name,\n\t\t\t\t\tfileUrl,\n\t\t\t\t\tuploadResponse,\n\t\t\t\t})),\n\t\t\t\t{ shouldDirty }\n\t\t\t);\n\t\t}, // eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[files.map(({ fileItem, status }) => `${fileItem?.id}-${status}`).join(\",\")]\n\t);\n\n\t// for reset\n\tuseEffect(() => {\n\t\tif (previousValue !== undefined && value === undefined && files.length) {\n\t\t\tsetFiles([]);\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [previousValue === undefined, value === undefined, files.length]);\n\n\t// =============================================================================\n\t// HELPER FUNCTIONS\n\t// =============================================================================\n\n\tconst handleGenericError = (index: number) => {\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tconst file = prev[index];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...file,\n\t\t\t\tfileItem: {\n\t\t\t\t\t...file.fileItem,\n\t\t\t\t\tid: file.fileItem?.id || generateRandomId(),\n\t\t\t\t\tname: file.rawFile.name,\n\t\t\t\t\terrorMessage: ERROR_MESSAGES.UPLOAD().GENERIC,\n\t\t\t\t},\n\t\t\t\tstatus: EFileStatus.ERROR_GENERIC,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\t};\n\n\tconst generateThumbnail = async (file: IFile, fileType?: string | undefined) => {\n\t\tif (RESIZEABLE_IMAGE_TYPES.includes(fileType || file.fileItem?.type)) {\n\t\t\tconst image = await ImageHelper.dataUrlToImage(file.dataURL);\n\t\t\tconst thumbnail = await ImageHelper.resampleImage(image, { width: 94, height: 94, crop: true });\n\t\t\treturn await FileHelper.fileToDataUrl(thumbnail);\n\t\t}\n\t\treturn \"\";\n\t};\n\n\tconst readFile = async (fileToRead: IFile) => {\n\t\tconst { addedFrom, dataURL, rawFile } = fileToRead;\n\t\tconst fileType = await FileHelper.getType(rawFile);\n\t\tconst validFileType = fileTypeRule.fileType?.length ? fileTypeRule.fileType?.includes(fileType.ext) : true;\n\n\t\tif (!validFileType) {\n\t\t\treturn {\n\t\t\t\terrorMessage:\n\t\t\t\t\tfileTypeRule.errorMessage || ERROR_MESSAGES.UPLOAD().FILE_TYPE(fileTypeRule.fileType || []),\n\t\t\t\tfileType,\n\t\t\t\tstatus: EFileStatus.ERROR_FORMAT,\n\t\t\t};\n\t\t}\n\n\t\tif (maxFileSizeRule.maxSizeInKb > 0) {\n\t\t\tconst maxSizeInB = maxFileSizeRule.maxSizeInKb * 1024;\n\t\t\tif (\n\t\t\t\t(upload.type === \"base64\" && FileHelper.getFilesizeFromBase64(dataURL) > maxSizeInB) ||\n\t\t\t\t(upload.type === \"multipart\" && rawFile.size > maxSizeInB)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\terrorMessage:\n\t\t\t\t\t\tmaxFileSizeRule.errorMessage ||\n\t\t\t\t\t\tERROR_MESSAGES.UPLOAD().MAX_FILE_SIZE(maxFileSizeRule.maxSizeInKb),\n\t\t\t\t\tfileType,\n\t\t\t\t\tstatus: EFileStatus.ERROR_SIZE,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (addedFrom === \"schema\") {\n\t\t\treturn {\n\t\t\t\tfileType,\n\t\t\t\tstatus: EFileStatus.UPLOADED,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tfileType,\n\t\t\tstatus: EFileStatus.UPLOAD_READY,\n\t\t};\n\t};\n\n\t// =============================================================================\n\t// FILE STATUS HANDLERS\n\t// =============================================================================\n\tconst injectFile = async (fileToInject: IFile, index: number) => {\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...prev[index],\n\t\t\t\tstatus: EFileStatus.INJECTING,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\n\t\tlet rawFile: File;\n\t\tif (fileToInject.dataURL) {\n\t\t\tconst blob = await FileHelper.dataUrlToBlob(fileToInject.dataURL);\n\t\t\trawFile = new File([blob], fileToInject.rawFile.name);\n\t\t} else if (fileToInject.fileUrl) {\n\t\t\tconst response: Blob = await new AxiosApiClient(\"\", undefined, undefined, false, {\n\t\t\t\tresponseType: \"blob\",\n\t\t\t}).get(fileToInject.fileUrl);\n\t\t\tconst fileType = await FileHelper.getType(new File([response], fileToInject.rawFile.name));\n\t\t\trawFile = new File([response], fileToInject.rawFile.name, { type: fileType.mime });\n\t\t\tfileToInject.dataURL = await FileHelper.fileToDataUrl(rawFile);\n\t\t}\n\t\tconst { errorMessage, fileType } = await readFile({ ...fileToInject, rawFile });\n\t\tconst thumbnailImageDataUrl = await generateThumbnail(fileToInject, fileType.mime);\n\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...fileToInject,\n\t\t\t\tfileItem: {\n\t\t\t\t\terrorMessage,\n\t\t\t\t\tid: fileToInject.fileItem?.id || generateRandomId(),\n\t\t\t\t\tname: FileHelper.deduplicateFileName(\n\t\t\t\t\t\tfiles.map(({ fileItem }) => fileItem?.name),\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\trawFile.name\n\t\t\t\t\t),\n\t\t\t\t\tprogress: 1,\n\t\t\t\t\tsize: rawFile.size,\n\t\t\t\t\ttype: fileType.mime,\n\t\t\t\t\tthumbnailImageDataUrl,\n\t\t\t\t},\n\t\t\t\trawFile,\n\t\t\t\tstatus: EFileStatus.UPLOADED,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\t};\n\n\tconst parseFile = async (fileToParse: IFile, index: number) => {\n\t\tconst compressedFile = await compressImageFile(fileToParse);\n\t\tconst dataURL = await FileHelper.fileToDataUrl(compressedFile.rawFile);\n\t\tconst { errorMessage, fileType, status } = await readFile({ dataURL, ...compressedFile });\n\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...compressedFile,\n\t\t\t\tdataURL,\n\t\t\t\tfileItem: {\n\t\t\t\t\terrorMessage,\n\t\t\t\t\tid: generateRandomId(),\n\t\t\t\t\tname: FileHelper.deduplicateFileName(\n\t\t\t\t\t\tfiles.map(({ fileItem }) => fileItem?.name),\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tcompressedFile.rawFile.name\n\t\t\t\t\t),\n\t\t\t\t\tsize: compressedFile.rawFile.size,\n\t\t\t\t\ttype: fileType.mime,\n\t\t\t\t\tprogress: 0,\n\t\t\t\t},\n\t\t\t\tstatus,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\t};\n\n\tconst uploadFile = async (fileToUpload: IFile, index: number) => {\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...prev[index],\n\t\t\t\tstatus: EFileStatus.UPLOADING,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\n\t\tconst formData = new FormData();\n\t\tformData.append(\"sessionId\", sessionId.current || \"\");\n\t\tformData.append(\"fileId\", fileToUpload.fileItem.id);\n\t\tformData.append(\"slot\", fileToUpload.slot.toString());\n\t\tif (upload.type === \"base64\") {\n\t\t\tformData.append(\"dataURL\", fileToUpload.dataURL);\n\t\t} else if (upload.type === \"multipart\") {\n\t\t\tformData.append(\"file\", fileToUpload.rawFile, fileToUpload.fileItem?.name);\n\t\t}\n\t\tconst response = await new AxiosApiClient(\"\", undefined, undefined, true).post(upload.url, formData, {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": upload.type === \"base64\" ? \"application/json\" : \"multipart/form-data\",\n\t\t\t},\n\t\t\tonUploadProgress: (progressEvent) => {\n\t\t\t\tconst { loaded, total } = progressEvent;\n\t\t\t\tsetFiles((prev) => {\n\t\t\t\t\tif (!prev[index]) return prev;\n\t\t\t\t\tconst updatedFiles = [...prev];\n\t\t\t\t\tupdatedFiles[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tfileItem: {\n\t\t\t\t\t\t\t...prev[index].fileItem,\n\t\t\t\t\t\t\tprogress: loaded / total,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\treturn updatedFiles;\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\n\t\tconst thumbnailImageDataUrl = await generateThumbnail(fileToUpload);\n\t\tsetFiles((prev) => {\n\t\t\tif (!prev[index]) return prev;\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...prev[index],\n\t\t\t\tfileItem: {\n\t\t\t\t\t...prev[index].fileItem,\n\t\t\t\t\tprogress: 1,\n\t\t\t\t\tthumbnailImageDataUrl,\n\t\t\t\t},\n\t\t\t\tfileUrl: response?.[\"data\"]?.[\"fileUrl\"],\n\t\t\t\tstatus: EFileStatus.UPLOADED,\n\t\t\t\tuploadResponse: response,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\t};\n\n\tconst deleteFile = (index: number) => {\n\t\tsetFiles((prev) => prev.filter((_file, i) => i !== index));\n\t};\n\n\tconst compressImageFile = async (fileToCompress: IFile) => {\n\t\tif (maxFileSizeRule.maxSizeInKb > 0 && compressImages) {\n\t\t\tconst maxSizeInB = maxFileSizeRule.maxSizeInKb * 1024;\n\t\t\tif (fileToCompress.rawFile.size > maxSizeInB) {\n\t\t\t\tconst fileType = await FileHelper.getType(fileToCompress.rawFile);\n\t\t\t\tif (RESIZEABLE_IMAGE_TYPES.includes(fileType.mime)) {\n\t\t\t\t\tlet fileOrBlob = await ImageHelper.compressImage(fileToCompress.rawFile, {\n\t\t\t\t\t\tfileSize: maxFileSizeRule.maxSizeInKb,\n\t\t\t\t\t});\n\t\t\t\t\tif (fileOrBlob instanceof Blob) {\n\t\t\t\t\t\tfileOrBlob = FileHelper.blobToFile(fileOrBlob, {\n\t\t\t\t\t\t\tname: fileToCompress.rawFile.name,\n\t\t\t\t\t\t\tlastModified: fileToCompress.rawFile.lastModified,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...fileToCompress,\n\t\t\t\t\t\trawFile: fileOrBlob,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn fileToCompress;\n\t};\n\n\t// =============================================================================\n\t// RENDER FUNCTIONS\n\t// =============================================================================\n\treturn null;\n};\n\nexport default FileUploadManager;\n"],"names":["RESIZEABLE_IMAGE_TYPES","FileUploadManager","props","compressImages","fileTypeRule","id","maxFileSizeRule","upload","value","files","setFiles","useContext","FileUploadContext","previousValue","usePrevious","setValue","useFormContext","sessionId","useRef","useEffect","current","generateRandomId","forEach","async","file","index","status","EFileStatus","INJECTED","injectFile","NONE","parseFile","UPLOAD_READY","uploadFile","TO_DELETE","deleteFile","err","handleGenericError","uploadedFiles","filter","UPLOADED","notPrefilledFiles","addedFrom","gotDeleteFiles","length","shouldDirty","map","dataURL","fileItem","fileUrl","uploadResponse","type","fileId","fileName","name","join","undefined","prev","updatedFiles","rawFile","errorMessage","ERROR_MESSAGES","UPLOAD","GENERIC","ERROR_GENERIC","generateThumbnail","fileType","includes","image","ImageHelper","dataUrlToImage","thumbnail","resampleImage","width","height","crop","FileHelper","fileToDataUrl","readFile","fileToRead","getType","ext","FILE_TYPE","ERROR_FORMAT","maxSizeInKb","maxSizeInB","getFilesizeFromBase64","size","MAX_FILE_SIZE","ERROR_SIZE","fileToInject","INJECTING","blob","dataUrlToBlob","File","response","AxiosApiClient","responseType","get","mime","thumbnailImageDataUrl","deduplicateFileName","progress","fileToParse","compressedFile","compressImageFile","fileToUpload","UPLOADING","formData","FormData","append","slot","toString","post","url","headers","onUploadProgress","progressEvent","loaded","total","_file","i","fileToCompress","fileOrBlob","compressImage","fileSize","Blob","blobToFile","lastModified"],"mappings":"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"}