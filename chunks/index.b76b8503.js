import{useContext as t,useState as e,useRef as s,useEffect as a}from"react";import{e as i,u as r,a as o,f as n,g as c,h as l,d as m,I as d,A as u}from"./index.4a30a1ff.js";import"react/jsx-runtime";import"events";import"buffer";import"@lifesg/react-design-system/media";import"@lifesg/react-design-system/text";import"@lifesg/react-design-system/color";import"styled-components";import"@lifesg/react-design-system/modal";import"@lifesg/react-design-system/button";import"@lifesg/react-design-system/markup";import"react-dom/server";import"@lifesg/react-design-system/layout";import"@lifesg/react-design-system/alert";import"@lifesg/react-design-system/divider";import"@lifesg/react-design-system/text-list";import"@lifesg/react-design-system/tab";import"@lifesg/react-design-system/filter";import"@lifesg/react-design-system/box-container";import"@lifesg/react-design-system/uneditable-section";import"@lifesg/react-icons";import"@lifesg/react-design-system/form";import"@lifesg/react-design-system/toggle";import"@lifesg/react-design-system/checkbox";import"@lifesg/react-design-system/input-textarea";import"@lifesg/react-design-system/file-upload";import"@lifesg/react-icons/cross";import"@lifesg/react-design-system/icon-button";import"@lifesg/react-icons/pin-fill";import"@lifesg/react-design-system";import"@lifesg/react-design-system/image-button";import"@lifesg/react-design-system/radio-button";const g=g=>{const{accepts:p,compress:E,dimensions:R,editImage:f,id:y,maxSizeInKb:h,outputType:D,upload:O,value:U}=g,{images:T,setImages:L,setErrorCount:w}=t(i),I=r(T),[b,S]=e(0),_=r(U),{setValue:N}=o(),v=s(),{dispatchFieldEvent:M,addFieldEventListener:x,removeFieldEventListener:C}=n();a((()=>{const t=t=>{L((e=>{const s=e.findIndex((e=>e.id===t.detail.id)),a={...e[s]};a.status=t.detail.updatedStatus,a.customErrorMessage=t.detail.errorMessage;const i=[...e];return i.splice(s,1,a),i}))};return x("update-image-status",y,t),()=>C("update-image-status",y,t)}),[]),a((()=>{v.current=c()}),[]),a((()=>{T.forEach(((t,e)=>{const s=I?.[e];if(t.status!==s?.status||t.dataURL!==s.dataURL)switch(t.status){case l.INJECTED:m.dataUrlToBlob(t.dataURL).then((s=>{L((a=>{const i=[...a];return i[e]={...t,file:new File([s],t.name),status:l.NONE},i}))})).catch((()=>{L((t=>t.filter(((t,s)=>s!==e))))}));break;case l.NONE:m.getType(t.file).then((s=>{const a=s.mime;a&&p.map(m.fileExtensionToMimeType).includes(a)?(L((s=>{const i=[...s];return i[e]={...t,name:m.deduplicateFileName(T.map((({name:t})=>t)),e,t.name),type:a,status:"schema"!==t.addedFrom?t.status:l.UPLOADED},i})),"schema"!==t.addedFrom&&(E?A(e,t):F(e,t))):L((s=>{const a=[...s];return a[e]={...t,status:l.ERROR_FORMAT},a}))}));break;case l.TO_RECOMPRESS:k(e,t);break;case l.COMPRESSED:case l.CONVERTED:case l.RECOMPRESSED:if(!f){const s=!M("upload-ready",y,{imageData:t});L((t=>{const a=[...t];return a[e]={...a[e],status:s?l.PENDING:l.UPLOAD_READY},a}))}break;case l.UPLOAD_READY:G(e,t);break;case l.TO_DELETE:L((t=>t.filter((({status:t})=>t!==l.TO_DELETE))));break;case l.UPLOADED:M("uploaded",y,{imageData:t})}}))}),[T.map((({status:t})=>t)).join(","),T.map((({dataURL:t})=>t)).join(",")]),a((()=>{let t=0;T.forEach((e=>{(e.type&&!p.map(m.fileExtensionToMimeType).includes(e.type)||[l.ERROR_GENERIC,l.ERROR_SIZE].includes(e.status))&&t++})),w((e=>Math.max(0,e+t-b))),S(t);const e=T.filter((({status:t})=>t===l.UPLOADED||t===l.ERROR_CUSTOM_MUTED)),s=e.filter((({addedFrom:t})=>"schema"!==t)),a=T.filter((({status:t})=>t===l.TO_DELETE)).length>0,i=s.length>0||a;N(y,e.map((({dataURL:t,drawingDataURL:e,name:s,uploadResponse:a})=>({fileName:s,dataURL:e||t,uploadResponse:a}))),{shouldDirty:i})}),[T.map((t=>t.status)).join(",")]),a((()=>{void 0!==_&&void 0===U&&T.length&&L([])}),[void 0===_,void 0===U,T.length]);const P=(t,e)=>{let s=R.width/t;return e*s>R.height&&(s=R.height/e),s},F=async(t,e)=>{try{const s=await d.convertBlob(e.file,m.fileExtensionToMimeType(D)),a=m.getFilesizeFromBase64(s);L(h&&a>1024*h?e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_SIZE},s}:e=>{const a=[...e];return a[t]={...e[t],dataURL:s,status:l.CONVERTED},a})}catch(e){L((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_GENERIC},s}))}},A=async(t,e)=>{try{const s=await d.convertBlob(e.file,m.fileExtensionToMimeType(D)),a=await d.dataUrlToImage(s),i={w:a.naturalWidth,h:a.naturalHeight},r=P(i.w,i.h);let o=await d.resampleImage(a,{scale:r});if(h&&(o=await d.compressImage(o,{fileSize:h})),h&&o.size>1024*h)L((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_SIZE},s}));else{const e=await m.fileToDataUrl(o);L((s=>{const a=[...s];return a[t]={...s[t],dataURL:e,status:l.COMPRESSED},a}))}}catch(e){L((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_GENERIC},s}))}},k=async(t,e)=>{if(e.drawingDataURL)try{const s=await d.dataUrlToImage(e.drawingDataURL),a={w:s.naturalWidth,h:s.naturalHeight},i=P(a.w,a.h);let r=await d.resampleImage(s,{scale:i});if(r=await d.compressImage(r,{fileSize:h}),r.size>1024*h){const e=[...T];e[t]={...T[t],status:l.ERROR_SIZE},L(e)}else{const e=await m.fileToDataUrl(r),s=[...T];s[t]={...T[t],drawingDataURL:e,status:l.RECOMPRESSED},L(s)}}catch(e){L((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_GENERIC},s}))}},G=async(t,e)=>{try{let s;if(L((e=>{const s=[...e];return s[t]={...e[t],status:l.UPLOADING},s})),O?.method&&O?.url){const a=new FormData;a.append("dataURL",e.drawingDataURL||e.dataURL||""),a.append("sessionId",v.current||""),a.append("slot",`${e.slot}`),s=await new u("",void 0,void 0,!0)[O.method](O.url,a,{onUploadProgress:e=>{const{loaded:s,total:a}=e,i=Math.floor(100*s/a);L((e=>{const s=[...e];return s[t]={...e[t],uploadProgress:i},s}))}})}L((e=>{const a=[...e];return a[t]={...e[t],uploadResponse:s,status:l.UPLOADED},a}))}catch(e){L((e=>{const s=[...e];return s[t]={...e[t],status:l.ERROR_GENERIC},s}))}};return null};export{g as default};
//# sourceMappingURL=index.b76b8503.js.map
