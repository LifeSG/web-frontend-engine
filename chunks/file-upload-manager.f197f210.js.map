{"version":3,"file":"file-upload-manager.f197f210.js","sources":["../../src/components/fields/file-upload/file-upload-manager.ts"],"sourcesContent":["import { useContext, useEffect, useRef } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { AxiosApiClient, FileHelper, ImageHelper, generateRandomId } from \"../../../utils\";\nimport { usePrevious } from \"../../../utils/hooks\";\nimport { ERROR_MESSAGES } from \"../../shared\";\nimport { FileUploadContext } from \"./file-upload-context\";\nimport { EFileStatus, IFile, IFileUploadSchema, IFileUploadValidationRule, IFileUploadValue } from \"./types\";\n\ninterface IProps {\n\tcompressImages: boolean;\n\tfileTypeRule: IFileUploadValidationRule;\n\tid: string;\n\tmaxFileSizeRule: IFileUploadValidationRule;\n\tupload: IFileUploadSchema[\"uploadOnAddingFile\"];\n\tvalue: IFileUploadValue[];\n}\n\nconst RESIZEABLE_IMAGE_TYPES = [\"image/jpeg\", \"image/gif\", \"image/png\"];\n\nconst FileUploadManager = (props: IProps) => {\n\t// =============================================================================\n\t// CONST, STATE, REFS\n\t// =============================================================================\n\tconst { compressImages, fileTypeRule, id, maxFileSizeRule, upload, value } = props;\n\tconst { files, setFiles } = useContext(FileUploadContext);\n\tconst previousValue = usePrevious(value);\n\tconst { setValue } = useFormContext();\n\tconst sessionId = useRef<string>();\n\n\t// =============================================================================\n\t// EFFECTS\n\t// =============================================================================\n\tuseEffect(() => {\n\t\tsessionId.current = generateRandomId();\n\t}, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\t// handle file status\n\t\t\tfiles.forEach(async (file, index) => {\n\t\t\t\ttry {\n\t\t\t\t\tswitch (file.status) {\n\t\t\t\t\t\tcase EFileStatus.INJECTED:\n\t\t\t\t\t\t\tawait injectFile(file, index);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EFileStatus.NONE:\n\t\t\t\t\t\t\tawait parseFile(file, index);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EFileStatus.UPLOAD_READY:\n\t\t\t\t\t\t\tawait uploadFile(file, index);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EFileStatus.TO_DELETE:\n\t\t\t\t\t\t\tdeleteFile(index);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\thandleGenericError(index);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// track / update values\n\t\t\tconst uploadedFiles = files.filter(({ status }) => status === EFileStatus.UPLOADED);\n\t\t\tconst notPrefilledFiles = uploadedFiles.filter(({ addedFrom }) => addedFrom !== \"schema\");\n\t\t\tconst hasNotPrefilledFiles = notPrefilledFiles.length > 0;\n\t\t\tconst gotDeleteFiles = files.filter(({ status }) => status === EFileStatus.TO_DELETE).length > 0;\n\n\t\t\t/**\n\t\t\t * should dirty if\n\t\t\t * - it is dirty in the first place\n\t\t\t * - there are non-prefilled files\n\t\t\t * - user deleted file (differentiated from reset)\n\t\t\t */\n\t\t\tconst shouldDirty = hasNotPrefilledFiles || gotDeleteFiles;\n\n\t\t\tsetValue(\n\t\t\t\tid,\n\t\t\t\tuploadedFiles.map(({ dataURL, fileItem, fileUrl, uploadResponse, addedFrom }) => ({\n\t\t\t\t\t...(upload.type === \"base64\" ? { dataURL } : {}),\n\t\t\t\t\tfileId: fileItem.id,\n\t\t\t\t\tfileName: fileItem.name,\n\t\t\t\t\tfileUrl,\n\t\t\t\t\tuploadResponse,\n\t\t\t\t\thandledFromDefault: addedFrom === \"schema\",\n\t\t\t\t})),\n\t\t\t\t{ shouldDirty, shouldTouch: hasNotPrefilledFiles }\n\t\t\t);\n\t\t}, // eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[files.map(({ fileItem, status }) => `${fileItem?.id}-${status}`).join(\",\")]\n\t);\n\n\t// for reset\n\tuseEffect(() => {\n\t\tif (previousValue !== undefined && value === undefined && files.length) {\n\t\t\tsetFiles([]);\n\t\t}\n\t}, [files, previousValue, setFiles, value]);\n\n\t// =============================================================================\n\t// HELPER FUNCTIONS\n\t// =============================================================================\n\n\tconst handleGenericError = (index: number) => {\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tconst file = prev[index];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...file,\n\t\t\t\tfileItem: {\n\t\t\t\t\t...file.fileItem,\n\t\t\t\t\tid: file.fileItem?.id || generateRandomId(),\n\t\t\t\t\tname: file.rawFile.name,\n\t\t\t\t\terrorMessage: ERROR_MESSAGES.UPLOAD().GENERIC,\n\t\t\t\t},\n\t\t\t\tstatus: EFileStatus.ERROR_GENERIC,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\t};\n\n\tconst generateThumbnail = async (file: IFile, fileType?: string | undefined) => {\n\t\tif (RESIZEABLE_IMAGE_TYPES.includes(fileType || file.fileItem?.type)) {\n\t\t\tconst image = await ImageHelper.dataUrlToImage(file.dataURL);\n\t\t\tconst thumbnail = await ImageHelper.resampleImage(image, { width: 94, height: 94, crop: true });\n\t\t\treturn await FileHelper.fileToDataUrl(thumbnail);\n\t\t}\n\t\treturn \"\";\n\t};\n\n\tconst readFile = async (fileToRead: IFile) => {\n\t\tconst { addedFrom, dataURL, rawFile } = fileToRead;\n\t\tconst fileType = await FileHelper.getType(rawFile);\n\t\tconst validFileType = fileTypeRule.fileType?.length ? fileTypeRule.fileType?.includes(fileType.ext) : true;\n\n\t\tif (!validFileType) {\n\t\t\treturn {\n\t\t\t\terrorMessage:\n\t\t\t\t\tfileTypeRule.errorMessage || ERROR_MESSAGES.UPLOAD().FILE_TYPE(fileTypeRule.fileType || []),\n\t\t\t\tfileType,\n\t\t\t\tstatus: EFileStatus.ERROR_FORMAT,\n\t\t\t};\n\t\t}\n\n\t\tif (maxFileSizeRule.maxSizeInKb > 0) {\n\t\t\tconst maxSizeInB = maxFileSizeRule.maxSizeInKb * 1024;\n\t\t\tif (\n\t\t\t\t(upload.type === \"base64\" && FileHelper.getFilesizeFromBase64(dataURL) > maxSizeInB) ||\n\t\t\t\t(upload.type === \"multipart\" && rawFile.size > maxSizeInB)\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\terrorMessage:\n\t\t\t\t\t\tmaxFileSizeRule.errorMessage ||\n\t\t\t\t\t\tERROR_MESSAGES.UPLOAD().MAX_FILE_SIZE(maxFileSizeRule.maxSizeInKb),\n\t\t\t\t\tfileType,\n\t\t\t\t\tstatus: EFileStatus.ERROR_SIZE,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (addedFrom === \"schema\") {\n\t\t\treturn {\n\t\t\t\tfileType,\n\t\t\t\tstatus: EFileStatus.UPLOADED,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tfileType,\n\t\t\tstatus: EFileStatus.UPLOAD_READY,\n\t\t};\n\t};\n\n\t// =============================================================================\n\t// FILE STATUS HANDLERS\n\t// =============================================================================\n\tconst injectFile = async (fileToInject: IFile, index: number) => {\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...prev[index],\n\t\t\t\tstatus: EFileStatus.INJECTING,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\n\t\tlet rawFile: File;\n\t\tif (fileToInject.dataURL) {\n\t\t\tconst blob = await FileHelper.dataUrlToBlob(fileToInject.dataURL);\n\t\t\trawFile = new File([blob], fileToInject.rawFile.name);\n\t\t} else if (fileToInject.fileUrl) {\n\t\t\tconst response: Blob = await new AxiosApiClient(\"\", undefined, undefined, false, {\n\t\t\t\tresponseType: \"blob\",\n\t\t\t}).get(fileToInject.fileUrl);\n\t\t\tconst fileType = await FileHelper.getType(new File([response], fileToInject.rawFile.name));\n\t\t\trawFile = new File([response], fileToInject.rawFile.name, { type: fileType.mime });\n\t\t\tfileToInject.dataURL = await FileHelper.fileToDataUrl(rawFile);\n\t\t}\n\t\tconst { errorMessage, fileType } = await readFile({ ...fileToInject, rawFile });\n\t\tconst thumbnailImageDataUrl = await generateThumbnail(fileToInject, fileType.mime);\n\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...fileToInject,\n\t\t\t\tfileItem: {\n\t\t\t\t\terrorMessage,\n\t\t\t\t\tid: fileToInject.fileItem?.id || generateRandomId(),\n\t\t\t\t\tname: FileHelper.deduplicateFileName(\n\t\t\t\t\t\tfiles.map(({ fileItem }) => fileItem?.name),\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\trawFile.name\n\t\t\t\t\t),\n\t\t\t\t\tprogress: 1,\n\t\t\t\t\tsize: rawFile.size,\n\t\t\t\t\ttype: fileType.mime,\n\t\t\t\t\tthumbnailImageDataUrl,\n\t\t\t\t},\n\t\t\t\trawFile,\n\t\t\t\tstatus: EFileStatus.UPLOADED,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\t};\n\n\tconst parseFile = async (fileToParse: IFile, index: number) => {\n\t\tconst compressedFile = await compressImageFile(fileToParse);\n\t\tconst dataURL = await FileHelper.fileToDataUrl(compressedFile.rawFile);\n\t\tconst { errorMessage, fileType, status } = await readFile({ dataURL, ...compressedFile });\n\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...compressedFile,\n\t\t\t\tdataURL,\n\t\t\t\tfileItem: {\n\t\t\t\t\terrorMessage,\n\t\t\t\t\tid: generateRandomId(),\n\t\t\t\t\tname: FileHelper.deduplicateFileName(\n\t\t\t\t\t\tfiles.map(({ fileItem }) => fileItem?.name),\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tcompressedFile.rawFile.name\n\t\t\t\t\t),\n\t\t\t\t\tsize: compressedFile.rawFile.size,\n\t\t\t\t\ttype: fileType.mime,\n\t\t\t\t\tprogress: 0,\n\t\t\t\t},\n\t\t\t\tstatus,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\t};\n\n\tconst uploadFile = async (fileToUpload: IFile, index: number) => {\n\t\tsetFiles((prev) => {\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...prev[index],\n\t\t\t\tstatus: EFileStatus.UPLOADING,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\n\t\tconst formData = new FormData();\n\t\tformData.append(\"sessionId\", sessionId.current || \"\");\n\t\tformData.append(\"fileId\", fileToUpload.fileItem.id);\n\t\tformData.append(\"slot\", fileToUpload.slot.toString());\n\t\tif (upload.type === \"base64\") {\n\t\t\tformData.append(\"dataURL\", fileToUpload.dataURL);\n\t\t} else if (upload.type === \"multipart\") {\n\t\t\tformData.append(\"file\", fileToUpload.rawFile, fileToUpload.fileItem?.name);\n\t\t}\n\t\tconst response = await new AxiosApiClient(\"\", undefined, undefined, true).post(upload.url, formData, {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": upload.type === \"base64\" ? \"application/json\" : \"multipart/form-data\",\n\t\t\t},\n\t\t\tonUploadProgress: (progressEvent) => {\n\t\t\t\tconst { loaded, total } = progressEvent;\n\t\t\t\tsetFiles((prev) => {\n\t\t\t\t\tif (!prev[index]) return prev;\n\t\t\t\t\tconst updatedFiles = [...prev];\n\t\t\t\t\tupdatedFiles[index] = {\n\t\t\t\t\t\t...prev[index],\n\t\t\t\t\t\tfileItem: {\n\t\t\t\t\t\t\t...prev[index].fileItem,\n\t\t\t\t\t\t\tprogress: loaded / total,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\treturn updatedFiles;\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\n\t\tconst thumbnailImageDataUrl = await generateThumbnail(fileToUpload);\n\t\tsetFiles((prev) => {\n\t\t\tif (!prev[index]) return prev;\n\t\t\tconst updatedFiles = [...prev];\n\t\t\tupdatedFiles[index] = {\n\t\t\t\t...prev[index],\n\t\t\t\tfileItem: {\n\t\t\t\t\t...prev[index].fileItem,\n\t\t\t\t\tprogress: 1,\n\t\t\t\t\tthumbnailImageDataUrl,\n\t\t\t\t},\n\t\t\t\tfileUrl: response?.[\"data\"]?.[\"fileUrl\"],\n\t\t\t\tstatus: EFileStatus.UPLOADED,\n\t\t\t\tuploadResponse: response,\n\t\t\t};\n\t\t\treturn updatedFiles;\n\t\t});\n\t};\n\n\tconst deleteFile = (index: number) => {\n\t\tsetFiles((prev) => prev.filter((_file, i) => i !== index));\n\t};\n\n\tconst compressImageFile = async (fileToCompress: IFile) => {\n\t\tif (maxFileSizeRule.maxSizeInKb > 0 && compressImages) {\n\t\t\tconst maxSizeInB = maxFileSizeRule.maxSizeInKb * 1024;\n\t\t\tif (fileToCompress.rawFile.size > maxSizeInB) {\n\t\t\t\tconst fileType = await FileHelper.getType(fileToCompress.rawFile);\n\t\t\t\tif (RESIZEABLE_IMAGE_TYPES.includes(fileType.mime)) {\n\t\t\t\t\tlet fileOrBlob = await ImageHelper.compressImage(fileToCompress.rawFile, {\n\t\t\t\t\t\tfileSize: maxFileSizeRule.maxSizeInKb,\n\t\t\t\t\t});\n\t\t\t\t\tif (fileOrBlob instanceof Blob) {\n\t\t\t\t\t\tfileOrBlob = FileHelper.blobToFile(fileOrBlob, {\n\t\t\t\t\t\t\tname: fileToCompress.rawFile.name,\n\t\t\t\t\t\t\tlastModified: fileToCompress.rawFile.lastModified,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...fileToCompress,\n\t\t\t\t\t\trawFile: fileOrBlob,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn fileToCompress;\n\t};\n\n\t// =============================================================================\n\t// RENDER FUNCTIONS\n\t// =============================================================================\n\treturn null;\n};\n\nexport default FileUploadManager;\n"],"names":["RESIZEABLE_IMAGE_TYPES","FileUploadManager","props","compressImages","fileTypeRule","id","maxFileSizeRule","upload","value","files","setFiles","useContext","FileUploadContext","previousValue","usePrevious","setValue","useFormContext","sessionId","useRef","useEffect","current","generateRandomId","forEach","async","file","index","status","EFileStatus","INJECTED","injectFile","NONE","parseFile","UPLOAD_READY","uploadFile","TO_DELETE","deleteFile","err","handleGenericError","uploadedFiles","filter","UPLOADED","hasNotPrefilledFiles","addedFrom","length","gotDeleteFiles","shouldDirty","map","dataURL","fileItem","fileUrl","uploadResponse","type","fileId","fileName","name","handledFromDefault","shouldTouch","join","undefined","prev","updatedFiles","rawFile","errorMessage","ERROR_MESSAGES","UPLOAD","GENERIC","ERROR_GENERIC","generateThumbnail","fileType","includes","image","ImageHelper","dataUrlToImage","thumbnail","resampleImage","width","height","crop","FileHelper","fileToDataUrl","readFile","fileToRead","getType","ext","FILE_TYPE","ERROR_FORMAT","maxSizeInKb","maxSizeInB","getFilesizeFromBase64","size","MAX_FILE_SIZE","ERROR_SIZE","fileToInject","INJECTING","blob","dataUrlToBlob","File","response","AxiosApiClient","responseType","get","mime","thumbnailImageDataUrl","deduplicateFileName","progress","fileToParse","compressedFile","compressImageFile","fileToUpload","UPLOADING","formData","FormData","append","slot","toString","post","url","headers","onUploadProgress","progressEvent","loaded","total","_file","i","fileToCompress","fileOrBlob","compressImage","fileSize","Blob","blobToFile","lastModified"],"mappings":"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"}