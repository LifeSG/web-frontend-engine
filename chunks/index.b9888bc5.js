import{useContext as t,useRef as e,useEffect as s}from"react";import{e as a,u as i,a as r,b as o,g as n,f as c,d as l,I as m,A as d}from"./index.a88ac40b.js";import"react/jsx-runtime";import"@lifesg/react-design-system/media";import"@lifesg/react-design-system/text";import"@lifesg/react-design-system/color";import"styled-components";import"@lifesg/react-design-system/button";import"@lifesg/react-design-system/modal";import"@lifesg/react-design-system/markup";import"react-dom/server";import"@lifesg/react-design-system/alert";import"@lifesg/react-design-system/layout";import"@lifesg/react-design-system/box-container";import"@lifesg/react-design-system/divider";import"@lifesg/react-design-system/text-list";import"@lifesg/react-design-system/popover-v2";import"@lifesg/react-icons";import"@lifesg/react-design-system/tab";import"@lifesg/react-icons/plus-circle-fill";import"@lifesg/react-design-system/button-with-icon";import"@lifesg/react-design-system/error-display";import"@lifesg/react-design-system/filter";import"@lifesg/react-design-system/uneditable-section";import"@lifesg/react-design-system/timeline";import"@lifesg/react-design-system/form";import"@lifesg/react-design-system/toggle";import"@lifesg/react-design-system/checkbox";import"@lifesg/react-design-system/file-upload";import"@lifesg/react-icons/cross";import"@lifesg/react-design-system/icon-button";import"@lifesg/react-icons/bin";import"@lifesg/react-icons/eraser";import"@lifesg/react-icons/pencil";import"@lifesg/react-icons/pencil-stroke";import"@lifesg/react-design-system";import"@lifesg/react-icons/plus";import"@lifesg/react-icons/exclamation-triangle";import"@lifesg/react-icons/pin-fill";import"@lifesg/react-design-system/design-token";import"@lifesg/react-design-system/image-button";import"@lifesg/react-design-system/radio-button";const g=g=>{const{accepts:p,compress:u,dimensions:f,editImage:E,id:R,maxSizeInKb:y,outputType:h,upload:D,value:O}=g,{images:U,setImages:T,setErrorCount:w,setCurrentFileIds:I}=t(a),L=i(U),b=i(O),{setValue:S}=r(),M=e(),N=e(0),{dispatchFieldEvent:_,addFieldEventListener:v,removeFieldEventListener:C}=o();s((()=>{const t=t=>{T((e=>{const s=e.findIndex((e=>e.id===t.detail.id)),a={...e[s]};a.status=t.detail.updatedStatus,a.customErrorMessage=t.detail.errorMessage;const i=[...e];return i.splice(s,1,a),i}))};return v("update-image-status",R,t),()=>C("update-image-status",R,t)}),[v,R,C,T]),s((()=>{M.current=n()}),[]),s((()=>{U.forEach(((t,e)=>{const s=L?.[e];if(t.status!==s?.status||t.dataURL!==s.dataURL)switch(t.status){case c.INJECTED:l.dataUrlToBlob(t.dataURL).then((s=>{T((a=>{const i=[...a];return i[e]={...t,file:new File([s],t.name),status:c.NONE},i}))})).catch((()=>{T((t=>t.filter(((t,s)=>s!==e))))}));break;case c.NONE:l.getType(t.file).then((s=>{const a=s.mime;a&&p.map(l.fileExtensionToMimeType).includes(a)?(T((s=>{const i=[...s];return i[e]={...t,name:l.deduplicateFileName(U.map((({name:t})=>t)),e,l.sanitizeFileName(t.name)),type:a,status:"schema"!==t.addedFrom?t.status:c.UPLOADED},i})),"schema"!==t.addedFrom&&(u?F(e,t):P(e,t))):T((s=>{const a=[...s];return a[e]={...t,status:c.ERROR_FORMAT},a}))}));break;case c.TO_RECOMPRESS:A(e,t);break;case c.COMPRESSED:case c.CONVERTED:case c.RECOMPRESSED:if(!E){const s=!_("upload-ready",R,{imageData:t});T((t=>{const a=[...t];return a[e]={...a[e],status:s?c.PENDING:c.UPLOAD_READY},a}))}break;case c.UPLOAD_READY:k(e,t);break;case c.TO_DELETE:T((t=>t.filter((({status:t})=>t!==c.TO_DELETE))));break;case c.UPLOADED:_("uploaded",R,{imageData:t})}}))}),[U.map((({status:t})=>t)).join(","),U.map((({dataURL:t})=>t)).join(",")]),s((()=>{let t=0;U.forEach((e=>{(e.type&&!p.map(l.fileExtensionToMimeType).includes(e.type)||[c.ERROR_GENERIC,c.ERROR_SIZE].includes(e.status))&&t++})),w((e=>Math.max(0,e+t-N.current))),N.current=t;const e=U.filter((({status:t})=>t===c.UPLOADED||t===c.ERROR_CUSTOM_MUTED)),s=e.filter((({addedFrom:t})=>"schema"!==t)),a=U.filter((({status:t})=>t===c.TO_DELETE)).length>0,i=s.length>0,r=i||a;I(e.map((({id:t})=>t))),S(R,e.map((({id:t,dataURL:e,drawingDataURL:s,name:a,metadata:i,uploadResponse:r})=>({fileId:t,fileName:a,dataURL:s||e,metadata:i,uploadResponse:r}))),{shouldDirty:r,shouldTouch:i})}),[p,R,U,w,S]),s((()=>{void 0!==b&&void 0===O&&U.length&&T([])}),[void 0===b,void 0===O,U.length]);const x=(t,e)=>{let s=f.width/t;return e*s>f.height&&(s=f.height/e),s},P=async(t,e)=>{try{const s=await m.convertBlob(e.file,l.fileExtensionToMimeType(h)),a=l.getFilesizeFromBase64(s);if(y&&a>1024*y)T((e=>{const s=[...e];return s[t]={...e[t],status:c.ERROR_SIZE},s}));else{const a=await m.getMetadata(e.file);T((e=>{const i=[...e];return i[t]={...e[t],dataURL:s,metadata:a,status:c.CONVERTED},i}))}}catch(e){T((e=>{const s=[...e];return s[t]={...e[t],status:c.ERROR_GENERIC},s}))}},F=async(t,e)=>{try{const s=await m.convertBlob(e.file,l.fileExtensionToMimeType(h)),a=await m.dataUrlToImage(s),i={w:a.naturalWidth,h:a.naturalHeight},r=x(i.w,i.h);let o=await m.resampleImage(a,{scale:r});if(y&&(o=await m.compressImage(o,{fileSize:y})),y&&o.size>1024*y)T((e=>{const s=[...e];return s[t]={...e[t],status:c.ERROR_SIZE},s}));else{const s=await m.getMetadata(e.file),a=await l.fileToDataUrl(o);T((e=>{const i=[...e];return i[t]={...e[t],dataURL:a,metadata:s,status:c.COMPRESSED},i}))}}catch(e){T((e=>{const s=[...e];return s[t]={...e[t],status:c.ERROR_GENERIC},s}))}},A=async(t,e)=>{if(e.drawingDataURL)try{const s=await m.dataUrlToImage(e.drawingDataURL),a={w:s.naturalWidth,h:s.naturalHeight},i=x(a.w,a.h);let r=await m.resampleImage(s,{scale:i});if(r=await m.compressImage(r,{fileSize:y}),r.size>1024*y){const e=[...U];e[t]={...U[t],status:c.ERROR_SIZE},T(e)}else{const e=await l.fileToDataUrl(r),s=[...U];s[t]={...U[t],drawingDataURL:e,status:c.RECOMPRESSED},T(s)}}catch(e){T((e=>{const s=[...e];return s[t]={...e[t],status:c.ERROR_GENERIC},s}))}},k=async(t,e)=>{try{let s;if(T((e=>{const s=[...e];return s[t]={...e[t],status:c.UPLOADING},s})),D?.method&&D?.url){const a=new FormData;a.append("dataURL",e.drawingDataURL||e.dataURL||""),a.append("sessionId",D?.sessionId||M.current||""),a.append("slot",`${e.slot}`),s=await new d("",void 0,void 0,!0)[D.method](D.url,a,{onUploadProgress:e=>{const{loaded:s,total:a}=e,i=Math.floor(100*s/a);T((e=>{const s=[...e];return s[t]={...e[t],uploadProgress:i},s}))}})}T((e=>{const a=[...e];return a[t]={...e[t],uploadResponse:s,status:c.UPLOADED},a}))}catch(e){T((e=>{const s=[...e];return s[t]={...e[t],status:c.ERROR_GENERIC},s}))}};return null};export{g as default};
//# sourceMappingURL=index.b9888bc5.js.map
