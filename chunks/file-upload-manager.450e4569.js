import{useContext as e,useRef as t,useEffect as a}from"react";import{F as i,u as s,a as r,g as l,E as o,b as m,d as n,A as d,I as p}from"./index.8dad06f7.js";import"react/jsx-runtime";import"@lifesg/react-design-system/text";import"@lifesg/react-design-system/modal";import"@lifesg/react-design-system/markup";import"react-dom/server";import"@lifesg/react-design-system/media";import"events";import"buffer";import"@lifesg/react-design-system/color";import"styled-components";import"@lifesg/react-design-system/button";import"@lifesg/react-design-system/alert";import"@lifesg/react-design-system/layout";import"@lifesg/react-design-system/box-container";import"@lifesg/react-design-system/divider";import"@lifesg/react-design-system/text-list";import"@lifesg/react-design-system/tab";import"@lifesg/react-design-system/filter";import"@lifesg/react-design-system/uneditable-section";import"@lifesg/react-icons";import"@lifesg/react-design-system/form";import"@lifesg/react-design-system/toggle";import"@lifesg/react-design-system/checkbox";import"@lifesg/react-design-system/input-textarea";import"@lifesg/react-design-system/file-upload";import"@lifesg/react-icons/cross";import"@lifesg/react-design-system/icon-button";import"@lifesg/react-icons/pin-fill";import"@lifesg/react-design-system";import"@lifesg/react-design-system/image-button";import"@lifesg/react-design-system/radio-button";const f=["image/jpeg","image/gif","image/png"],c=c=>{const{compressImages:g,fileTypeRule:u,id:y,maxFileSizeRule:w,upload:I,value:F}=c,{files:U,setFiles:b}=e(i),E=s(F),{setValue:R}=r(),T=t();a((()=>{T.current=l()}),[]),a((()=>{U.forEach((async(e,t)=>{try{switch(e.status){case o.INJECTED:await O(e,t);break;case o.NONE:await x(e,t);break;case o.UPLOAD_READY:await z(e,t);break;case o.TO_DELETE:A(t)}}catch(e){D(t)}}));const e=U.filter((({status:e})=>e===o.UPLOADED)),t=e.filter((({addedFrom:e})=>"schema"!==e)).length>0,a=U.filter((({status:e})=>e===o.TO_DELETE)).length>0,i=t||a;R(y,e.map((({dataURL:e,fileItem:t,fileUrl:a,uploadResponse:i,addedFrom:s})=>({..."base64"===I.type?{dataURL:e}:{},fileId:t.id,fileName:t.name,fileUrl:a,uploadResponse:i,handledFromDefault:"schema"===s}))),{shouldDirty:i,shouldTouch:t})}),[U.map((({fileItem:e,status:t})=>`${e?.id}-${t}`)).join(",")]),a((()=>{void 0!==E&&void 0===F&&U.length&&b([])}),[U,E,b,F]);const D=e=>{b((t=>{const a=[...t],i=t[e];return a[e]={...i,fileItem:{...i.fileItem,id:i.fileItem?.id||l(),name:i.rawFile.name,errorMessage:m.UPLOAD().GENERIC},status:o.ERROR_GENERIC},a}))},L=async(e,t)=>{if(f.includes(t||e.fileItem?.type)){const t=await p.dataUrlToImage(e.dataURL),a=await p.resampleImage(t,{width:94,height:94,crop:!0});return await n.fileToDataUrl(a)}return""},h=async e=>{const{addedFrom:t,dataURL:a,rawFile:i}=e,s=await n.getType(i);if(!(!u.fileType?.length||u.fileType?.includes(s.ext)))return{errorMessage:u.errorMessage||m.UPLOAD().FILE_TYPE(u.fileType||[]),fileType:s,status:o.ERROR_FORMAT};if(w.maxSizeInKb>0){const e=1024*w.maxSizeInKb;if("base64"===I.type&&n.getFilesizeFromBase64(a)>e||"multipart"===I.type&&i.size>e)return{errorMessage:w.errorMessage||m.UPLOAD().MAX_FILE_SIZE(w.maxSizeInKb),fileType:s,status:o.ERROR_SIZE}}return"schema"===t?{fileType:s,status:o.UPLOADED}:{fileType:s,status:o.UPLOAD_READY}},O=async(e,t)=>{let a;if(b((e=>{const a=[...e];return a[t]={...e[t],status:o.INJECTING},a})),e.dataURL){const t=await n.dataUrlToBlob(e.dataURL);a=new File([t],e.rawFile.name)}else if(e.fileUrl){const t=await new d("",void 0,void 0,!1,{responseType:"blob"}).get(e.fileUrl),i=await n.getType(new File([t],e.rawFile.name));a=new File([t],e.rawFile.name,{type:i.mime}),e.dataURL=await n.fileToDataUrl(a)}const{errorMessage:i,fileType:s}=await h({...e,rawFile:a}),r=await L(e,s.mime);b((m=>{const d=[...m];return d[t]={...e,fileItem:{errorMessage:i,id:e.fileItem?.id||l(),name:n.deduplicateFileName(U.map((({fileItem:e})=>e?.name)),t,a.name),progress:1,size:a.size,type:s.mime,thumbnailImageDataUrl:r},rawFile:a,status:o.UPLOADED},d}))},x=async(e,t)=>{const a=await M(e),i=await n.fileToDataUrl(a.rawFile),{errorMessage:s,fileType:r,status:o}=await h({dataURL:i,...a});b((e=>{const m=[...e];return m[t]={...a,dataURL:i,fileItem:{errorMessage:s,id:l(),name:n.deduplicateFileName(U.map((({fileItem:e})=>e?.name)),t,a.rawFile.name),size:a.rawFile.size,type:r.mime,progress:0},status:o},m}))},z=async(e,t)=>{b((e=>{const a=[...e];return a[t]={...e[t],status:o.UPLOADING},a}));const a=new FormData;a.append("sessionId",T.current||""),a.append("fileId",e.fileItem.id),a.append("slot",e.slot.toString()),"base64"===I.type?a.append("dataURL",e.dataURL):"multipart"===I.type&&a.append("file",e.rawFile,e.fileItem?.name);const i=await new d("",void 0,void 0,!0).post(I.url,a,{headers:{"Content-Type":"base64"===I.type?"application/json":"multipart/form-data"},onUploadProgress:e=>{const{loaded:a,total:i}=e;b((e=>{if(!e[t])return e;const s=[...e];return s[t]={...e[t],fileItem:{...e[t].fileItem,progress:a/i}},s}))}}),s=await L(e);b((e=>{if(!e[t])return e;const a=[...e];return a[t]={...e[t],fileItem:{...e[t].fileItem,progress:1,thumbnailImageDataUrl:s},fileUrl:i?.data?.fileUrl,status:o.UPLOADED,uploadResponse:i},a}))},A=e=>{b((t=>t.filter(((t,a)=>a!==e))))},M=async e=>{if(w.maxSizeInKb>0&&g){const t=1024*w.maxSizeInKb;if(e.rawFile.size>t){const t=await n.getType(e.rawFile);if(f.includes(t.mime)){let t=await p.compressImage(e.rawFile,{fileSize:w.maxSizeInKb});return t instanceof Blob&&(t=n.blobToFile(t,{name:e.rawFile.name,lastModified:e.rawFile.lastModified})),{...e,rawFile:t}}}}return e};return null};export{c as default};
//# sourceMappingURL=file-upload-manager.450e4569.js.map
