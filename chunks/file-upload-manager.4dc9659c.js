import{useContext as e,useRef as t,useEffect as i}from"react";import{F as a,u as s,a as r,b as l,g as o,E as n,d as m,e as p,A as c,I as d}from"./index.826fa57a.js";import"react/jsx-runtime";import"@lifesg/react-design-system/theme";import"styled-components";import"@lifesg/react-design-system/markup";import"react-dom/server";import"@lifesg/react-design-system/typography";import"@lifesg/react-design-system/button";import"@lifesg/react-design-system/modal";import"@lifesg/react-design-system/alert";import"@lifesg/react-design-system/v2_layout";import"@lifesg/react-design-system/box-container";import"@lifesg/react-design-system/divider";import"@lifesg/react-design-system/layout";import"@lifesg/react-design-system/text-list";import"@lifesg/react-design-system/popover-v2";import"@lifesg/react-icons";import"@lifesg/react-design-system/tab";import"@lifesg/react-icons/plus-circle-fill";import"@lifesg/react-design-system/button-with-icon";import"@lifesg/react-design-system/error-display";import"@lifesg/react-design-system/filter";import"@lifesg/react-design-system/uneditable-section";import"@lifesg/react-design-system/timeline";import"@lifesg/react-design-system/form";import"@lifesg/react-design-system/checkbox";import"@lifesg/react-design-system/toggle";import"@lifesg/react-design-system/file-upload";import"@lifesg/react-icons/cross";import"@lifesg/react-design-system/icon-button";import"@lifesg/react-icons/bin";import"@lifesg/react-icons/eraser";import"@lifesg/react-icons/pencil";import"@lifesg/react-icons/pencil-stroke";import"@lifesg/react-icons/plus";import"@lifesg/react-icons/exclamation-triangle";import"@lifesg/react-icons/pin-fill";import"@lifesg/react-design-system/image-button";import"@lifesg/react-design-system/radio-button";const f=["image/jpeg","image/gif","image/png"],g=g=>{const{compressImages:u,fileTypeRule:y,id:w,maxFileSizeRule:I,upload:F,uploadRule:U,value:b}=g,{files:E,setFiles:R,setCurrentFileIds:T}=e(a),D=s(b),{setValue:h}=r(),{dispatchFieldEvent:L}=l(),O=t();i((()=>{O.current=o()}),[]),i((()=>{E.forEach((async(e,t)=>{try{switch(e.status){case n.INJECTED:await M(e,t);break;case n.NONE:await v(e,t);break;case n.UPLOAD_READY:await P(e,t);break;case n.TO_DELETE:N(t)}}catch(e){x(t)}}));const e=E.filter((({status:e})=>e===n.UPLOADED)),t=e.filter((({addedFrom:e})=>"schema"!==e)).length>0,i=E.filter((({status:e})=>e===n.TO_DELETE)).length>0,a=t||i;T(e.map((({fileItem:e})=>e.id))),h(w,e.map((({dataURL:e,fileItem:t,fileUrl:i,uploadResponse:a})=>({..."base64"===F.type?{dataURL:e}:{},fileId:t.id,fileName:t.name,fileUrl:i,uploadResponse:a}))),{shouldDirty:a,shouldTouch:t})}),[E.map((({fileItem:e,status:t})=>`${e?.id}-${t}`)).join(",")]),i((()=>{void 0!==D&&void 0===b&&E.length&&R([])}),[E,D,R,b]);const x=e=>{R((t=>{const i=[...t],a=t[e];return i[e]={...a,fileItem:{...a.fileItem,id:a.fileItem?.id||o(),name:a.rawFile.name,errorMessage:U?.errorMessage||m.UPLOAD().GENERIC},status:n.ERROR_GENERIC},i}))},z=async(e,t)=>{if(f.includes(t||e.fileItem?.type)){const t=await d.dataUrlToImage(e.dataURL),i=await d.resampleImage(t,{width:94,height:94,crop:!0});return await p.fileToDataUrl(i)}return""},A=async e=>{const{addedFrom:t,dataURL:i,rawFile:a}=e,s=await p.getType(a);if(!(!y.fileType?.length||y.fileType?.includes(s.ext)))return{errorMessage:y.errorMessage||m.UPLOAD().FILE_TYPE(y.fileType||[]),fileType:s,status:n.ERROR_FORMAT};if(I.maxSizeInKb>0){const e=1024*I.maxSizeInKb;if("base64"===F.type&&p.getFilesizeFromBase64(i)>e||"multipart"===F.type&&a.size>e)return{errorMessage:I.errorMessage||m.UPLOAD().MAX_FILE_SIZE(I.maxSizeInKb),fileType:s,status:n.ERROR_SIZE}}return"schema"===t?{fileType:s,status:n.UPLOADED}:{fileType:s,status:n.UPLOAD_READY}},M=async(e,t)=>{let i;if(R((e=>{const i=[...e];return i[t]={...e[t],status:n.INJECTING},i})),e.dataURL){const t=await p.dataUrlToBlob(e.dataURL);i=new File([t],e.rawFile.name)}else if(e.fileUrl){const t=await new c("",void 0,void 0,!1,{responseType:"blob"}).get(e.fileUrl),a=await p.getType(new File([t],e.rawFile.name));i=new File([t],e.rawFile.name,{type:a.mime}),e.dataURL=await p.fileToDataUrl(i)}const{errorMessage:a,fileType:s}=await A({...e,rawFile:i}),r=await z(e,s.mime);R((l=>{const m=[...l];return m[t]={...e,fileItem:{errorMessage:a,id:e.fileItem?.id||o(),name:p.deduplicateFileName(E.map((({fileItem:e})=>e?.name)),t,i.name),progress:1,size:i.size,type:s.mime,thumbnailImageDataUrl:r},rawFile:i,status:n.UPLOADED},m}))},v=async(e,t)=>{const i=await S(e),a=await p.fileToDataUrl(i.rawFile),{errorMessage:s,fileType:r,status:l}=await A({dataURL:a,...i});R((e=>{const n=[...e];return n[t]={...i,dataURL:a,fileItem:{errorMessage:s,id:o(),name:p.deduplicateFileName(E.map((({fileItem:e})=>e?.name)),t,i.rawFile.name),size:i.rawFile.size,type:r.mime,progress:0},status:l},n}))},P=async(e,t)=>{R((e=>{const i=[...e];return i[t]={...e[t],status:n.UPLOADING},i}));const i=new FormData;i.append("sessionId",O.current||""),i.append("fileId",e.fileItem.id),i.append("slot",e.slot.toString()),"base64"===F.type?i.append("dataURL",e.dataURL):"multipart"===F.type&&i.append("file",e.rawFile,e.fileItem?.name);try{const a=await new c("",void 0,void 0,!0).post(F.url,i,{headers:{"Content-Type":"base64"===F.type?"application/json":"multipart/form-data",...F.headers},onUploadProgress:e=>{const{loaded:i,total:a}=e;R((e=>{if(!e[t])return e;const s=[...e];return s[t]={...e[t],fileItem:{...e[t].fileItem,progress:i/a}},s}))}}),s=await z(e);R((e=>{if(!e[t])return e;const i=[...e];return i[t]={...e[t],fileItem:{...e[t].fileItem,progress:1,thumbnailImageDataUrl:s},fileUrl:a?.data?.fileUrl,status:n.UPLOADED,uploadResponse:a},i}))}catch(t){throw L("upload-error",w,{fileId:e.fileItem.id,errorData:t?.response?.data}),t}},N=e=>{R((t=>t.filter(((t,i)=>i!==e))))},S=async e=>{if(I.maxSizeInKb>0&&u){const t=1024*I.maxSizeInKb;if(e.rawFile.size>t){const t=await p.getType(e.rawFile);if(f.includes(t.mime)){let t=await d.compressImage(e.rawFile,{fileSize:I.maxSizeInKb});return t instanceof Blob&&(t=p.blobToFile(t,{name:e.rawFile.name,lastModified:e.rawFile.lastModified})),{...e,rawFile:t}}}}return e};return null};export{g as default};
//# sourceMappingURL=file-upload-manager.4dc9659c.js.map
